🔸 简介
    用 djangocms + uwsgi + nginx 来搭建web 服务器.
    然后用 bootstarp 弄网站排版.
    最后用 lsync 同步本地 文本 到服务器,
    每篇博客都是一个 txt 文件连接. 



🔸 文件夹架构
    关键文件位置.供参考

    /home/djcmsenv
    /home/mycms

    /home/mycms/test.py
    /home/mycms/uwsgi.ini
    /home/mycms/uwsgi_params
    /home/mycms/mysite_nginx.conf
    /home/mycms/manage.py
    /home/mycms/mycms/settings.py




⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️------⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️
🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵   Nginx + uwsgi + djangocms  🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵
⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️------⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️
🔸 介绍

    nginx 是一个 http 服务器，与 apache、lighttpd、Microsoft IIS 等属于同类产品;
    nginx 面向的是 html

    uwsgi 实际上也是一个 http 服务器，只不过它只面向 python 网络应用程序。

    网站其实不一定要用纯html写的. 用python也可以. 比如用 diango 也能搭建网站出来.
    但是 nginx 只支持 html; 
    如果你用 python (django) 搭建的网站那么就必须用uwsgi 这个 http 服务器,
    不过 Nginx 毕竟是最流行的web服务器. 因为功能是强大.
    所以就有了 Nginx + uwsgi + python(django) 这方案.

    Nginx 通过 socket 连接 uwsgi.

    ⦿ uwsgi 命令              
        启动uwsgi：   uwsgi --ini uwsgi.ini
        停止uwsgi：   uwsgi --stop uwsgi.pid
        重新加载配置：uwsgi --reload uwsgi.pid


    ❗️❗️ the web client <-> nginx <-> the socket <-> uwsgi <-> Django ❗️❗️
    ❗️❗️ the web client <-> nginx <-> the socket <-> uwsgi <-> Django ❗️❗️




🔸 Nginx + uwsgi + djangocms 原理
    ❗️the web client <-> the web server(nginx) <-> the socket <-> uwsgi <-> Django❗️
    ❗️the web client <-> the web server(nginx) <-> the socket <-> uwsgi <-> Django❗️
    ❗️the web client <-> the web server(nginx) <-> the socket <-> uwsgi <-> Django❗️



🔸 准备

    ⦿ 域名解析  
        www.0214.help ➜ 104.224.139.45

    ⦿ 临时关闭防火墙     
        service iptables stop    systemctl stop firewalld

        ❗️ 如果是 gce 这种有外部防火墙的. 必须设置外部防火墙 ❗️
        ❗️ 如果是 gce 这种有外部防火墙的. 必须设置外部防火墙 ❗️
        ❗️ 如果是 gce 这种有外部防火墙的. 必须设置外部防火墙 ❗️


    ⦿ djangocms 要求
        django CMS requires Django 1.8, 1.9 or 1.10 and Python 2.7, 3.3 or 3.4.

    ⦿ djangocms-installer
        djangocms 搭建脚本. 安装这个会自动安装 各种依赖! 强烈建议在虚拟环境中使用

    ⦿ 虚拟环境跨平台.
        ❗️❗️❗️虚拟环境不能跨平台使用! mac 的虚拟环境 不能同步到 centos 上用的❗️❗️❗️
        ❗️❗️❗️虚拟环境不能跨平台使用! mac 的虚拟环境 不能同步到 centos 上用的❗️❗️❗️



🔸 LNMP 新建 nginx 虚拟主机
    lnmp vhost add
    ================================================
    Virtualhost infomation:
    Your domain: www.0214.live
    Home Directory: /home/wwwroot/www.0214.live
    Rewrite: none
    Enable log: no
    Create database: no
    Create ftp account: no
    ================================================

    ⦿ 重启 Nginx   service nginx restart 
        现在 浏览器输入 www.0214.live 是没页面的.
        因为 /home/wwwroot/www.0214.live 目录下没有 index.html.


🔸 Django 开发服务器测试 ✔︎

    ❗️❗️ 项目必须建在 home 目录下. 具体原因未知,反正建在root目录下有问题.❗️❗️
    ❗️❗️ 项目必须建在 home 目录下. 具体原因未知,反正建在root目录下有问题.❗️❗️
    ❗️❗️ 项目必须建在 home 目录下. 具体原因未知,反正建在root目录下有问题.❗️❗️

    原因也许是uWSGI默认在www-data用户组！


    ⦿ cd /home

    ⦿ 虚拟环境建立
        • wget 安装   yum install wget
        • pip  安装   wget https://bootstrap.pypa.io/get-pip.py && python get-pip.py
        • 虚拟环境安装  pip install virtualenv
        • 虚拟环境建立  virtualenv djcmsenv 
        • 进入虚拟环境  source /home/djcmsenv/bin/activate

    ⦿ 新建项目
        pip install djangocms-installer && djangocms mycms

        👹 GCE 天坑一个. 如果你用最低配 这里会出错!!!!! 各种报错.
        1共享vcpu + 内存1.7 的那个就可以 坑爹...


    ⦿ 创建项目初始数据表
        python /home/mycms/manage.py migrate

    ⦿ 开启项目外网权限
        vi /home/mycms/mycms/settings.py
        ALLOWED_HOSTS = [] 改成:
        ALLOWED_HOSTS = ['104.224.139.45', 'www.0214.help'] 
        ALLOWED_HOSTS = ['35.194.128.92', 'www.0214.live'] 
        
        这里填的是服务器的公网IP. 和域名

    ⦿ 启动开发服务器   
        python  /home/mycms/manage.py runserver 0.0.0.0:888

    ⦿ 浏览器测试
        104.224.139.45:888 ➜ 出现 cms 登录界面
        35.194.128.92:888


🔸 uwsgi web服务器测试 ✔︎

    ⦿ 安装 uwsgi  
        pip install uwsgi

    ⦿ 新建 python 测试文件
        目的是为了 测试 uwsgi  能否正常工作

        vi /home/mycms/test.py

def application(env, start_response):
    start_response('200 OK', [('Content-Type','text/html')])
    return ["Hello World"] # python2
    #return [b"Hello World"] # python3


        ❗️❗️❗️ python 必须注意缩进,def 行首; 缩进空格数量统一!❗️❗️❗️
        ❗️❗️❗️ python 必须注意缩进,def 行首; 缩进空格数量统一!❗️❗️❗️


    ⦿ 测试文件执行权限赋予
        chmod 755 /home/mycms/test.py

    ⦿ uwsgi 运行 test.py 测试文件
        uwsgi --http :999 --wsgi-file /home/mycms/test.py

    ⦿ 浏览器测试
        104.224.139.45:999 ➜ 出现 helloworld
        这里如果出现问题. 必须看 test.py的缩进... 


🔸 uwsgi 运行 python项目  ✔︎

    cd /home/mycms
    下面命令进行必须在 /home/mycms  项目下运行.

    uwsgi --http :777 --chdir /home/mycms --home=/home/djcmsenv --module mycms.wsgi
    
        --chdir 指定项目路径.
        --home  指定虚拟环境路径
        --module 项目名.wsgi


    ⦿ 浏览器测试
        104.224.139.45:777 ➜ 出现cms 登录界面




🔸 nginx ➜ uwsgi 配置

    ⦿ 新建 uwsgi_params文件  
        该文件必须在项目目录下.该文件不需要任何修改.直接复制就行.
        vi /home/mycms/uwsgi_params

uwsgi_param  QUERY_STRING       $query_string;
uwsgi_param  REQUEST_METHOD     $request_method;
uwsgi_param  CONTENT_TYPE       $content_type;
uwsgi_param  CONTENT_LENGTH     $content_length;

uwsgi_param  REQUEST_URI        $request_uri;
uwsgi_param  PATH_INFO          $document_uri;
uwsgi_param  DOCUMENT_ROOT      $document_root;
uwsgi_param  SERVER_PROTOCOL    $server_protocol;
uwsgi_param  REQUEST_SCHEME     $scheme;
uwsgi_param  HTTPS              $https if_not_empty;

uwsgi_param  REMOTE_ADDR        $remote_addr;
uwsgi_param  REMOTE_PORT        $remote_port;
uwsgi_param  SERVER_PORT        $server_port;
uwsgi_param  SERVER_NAME        $server_name; 



    ⦿ 新建 nginx 虚拟主机配置文件 mysite_nginx.conf 
        一般也在项目目录下, 在 nginx.conf 中把这文件 include 进去就可以了

        vi /home/mycms/mysite_nginx.conf

upstream django { server 127.0.0.1:333; # 填 uwsgi 端口  }
server {
    listen      222;                    # 填 nginx 监听端口
    server_name www.0214.help;          # 填 nigix 监听域名
    charset    utf-8;
    client_max_body_size 75M;

    location /media  {   alias /home/mycms/media;  # 填项目media  路径 }
    location /static {   alias /home/mycms/static; # 填项目static 路径 }
    location /       {
        uwsgi_pass  django;
        include /home/mycms/uwsgi_params;       # 填项目 uwsgi_params 路径
    }
}


    👁‍🗨  解析
        uwsgi_pass  django; 
        upstream django { server 127.0.0.1:333;  }

    ❗️❗️ uwsgi_pass 让Nginx把到的所有请求都转发到”127.0.0.1:333″也就是 uWSGI服务器上。
    ❗️❗️ uwsgi_pass 让Nginx把到的所有请求都转发到”127.0.0.1:333″也就是 uWSGI服务器上。



    ⦿ 修改 nginx 默认配置
        把上面的 mysite_nginx.conf include 到默认的 nginx.conf 中才会生效!!!        

        vi /usr/local/nginx/conf/nginx.conf

        include vhost/*.conf; 行下面添加
        include /home/mycms/mysite_nginx.conf;

            👁‍🗨 如果你配置过其他虚拟主机. 那么最好注释掉其他所有 *.conf 
            暂时只留 include mysite_nginx.conf.
            免得 其他的配置文件 对 mysite_nginx.conf 产生影响.


            👁‍🗨  Mac os nginx 
                ⦿ nginx 安装路径
                    type nginx 来查找. nginx is /usr/local/bin/nginx

                ⦿ Mac brew nginx 安装路径
                    brew 安装的软件都在 /usr/local 文件夹下.
                    把所有软件的 bin 都放在 /usr/local/bin 下
                    把所有软件到 配置文件 都放 /usr/local/etc下.
                    所有 Mac 的nginx 配置文件路径是: 
                    vi /usr/local/etc/nginx/nginx.conf

            👁‍🗨  虚拟主机配置文件 优先级
                ❗️❗️ 默认配置文件 优先级 小于 虚拟主机配置文件优先级 ❗️❗️
                ❗️❗️ 默认配置文件 优先级 小于 虚拟主机配置文件优先级 ❗️❗️

                默认配置文件. 最好一般都会 include 所有虚拟主机配置文件的配置.
                默认配置文件的某些设置是会被 虚拟主机的配置文件 覆盖掉的!!
                所以尽量 创建虚拟主机. 尽量在虚拟主机的配置文件中进行修改.



    ⦿ 项目静态文件(不可省略)
        django项目 静态文件路径本来是在/home/mycms/mycms/static 的. 
        不知为什么 要改成 /home/mycms/static

        vi /home/mycms/mycms/settings.py
            尾部添加行
            STATIC_ROOT = os.path.join(BASE_DIR, "static/")

        复制 /home/mycms/mycms/static 到 /home/mycms/static
            python /home/mycms/manage.py collectstatic
            输入 yes

        • 关闭 apache service httpd stop
        • 重启 nginx  sudo /etc/init.d/nginx restart

        • media 测试
            为什么不是 static 文件夹... 不知道..
            cd /home/mycms/media && wget http://picture.baidu.com/media.png

        • 浏览器测试  http://www.0214.help:222/media/media.png
        👹 项目建在 root 目录下就不行. 这里会出现 403. 在 home 目录下就正常!!!
        👹 项目建在 root 目录下就不行. 这里会出现 403. 在 home 目录下就正常!!!




🔸 nginx ➜ uwsgi(http) ➜ test.py
    ⦿ 进入虚拟环境
        source /home/djcmsenv/bin/activate && cd /home/mycms

    ⦿ 启动uwsgi
        uwsgi --socket :333 --wsgi-file /home/mycms/test.py

            注意 这里的 333 不是随便填的
            要和 mysite_nginx.conf 
            upstream django { server 127.0.0.1:333;  } 一样.

    ⦿ 浏览器测试    www.0214.help:222    出现 hello world



🔸 nginx ➜ uwsgi(http) ➜ jangocms 

    ⦿ 运行uwsgi
        uwsgi --socket :333 --chdir /home/mycms --home=/home/djcmsenv --module mycms.wsgi

        👁‍🗨 上面的 test.py 不需要虚拟环境. 是因为 test.py 只是一个 py文件.
        这里是一个 jangocms 项目. 项目需要很多依赖! 这些依赖都是安装在 虚拟环境里的.
        所以这里必须加虚拟环境的路径. 不然肯定抱错.

    ⦿ 浏览器测试  www.0214.help:222      出现 cms 的登录页面.



🔸 nginx ➜ uwsgi(socks) ➜ test.py

    到目前为止,我们使用了TCP的socket端口, 
    但事实上, 使用Unix sockets比ports更好.但是需要做一点小小的改动.

    ⦿ 配置 nginx 文件
        vi /home/mycms/mysite_nginx.conf

            upstream django { server 127.0.0.1:333;  }
            改成 
            upstream django { server unix:///home/mycms/mycms.sock; }

            👁‍🗨 这个mycms.sock 会自动生成的. 不用关心.
            
    ⦿ 重启nginx    sudo /etc/init.d/nginx restart


    ⦿ 运行 uwsgi
        uwsgi --socket mycms.sock --wsgi-file test.py --chmod-socket=666

    ⦿ 浏览器测试 http://www.0214.help:222/ 就能看到 Hello World


🔸 nginx ➜ uwsgi(socks) ➜ djangocms 
    ⦿ 运行uwsgi
        uwsgi --home /home/djcmsenv --socket mycms.sock --module mycms.wsgi --chmod-socket=666

        ❗️❗️  uwsgi 命令必须加 虚拟路径!! ❗️❗️
        ❗️❗️  uwsgi 命令必须加 虚拟路径!! ❗️❗️
        ❗️❗️  uwsgi 命令必须加 虚拟路径!! ❗️❗️

        ❗️ 这个命令 必须在 /home/mycms 目录下执行 ....
        ❗️ 这个命令 必须在 /home/mycms 目录下执行 ....


    ⦿ 浏览器测试  http://www.0214.help:222/   出现 cms 的登录页面了.



🔸 用配置文件运行uWSGI.
    uwsgi 很多配置的. 全部写在命令行中太长了.也记不住. 所以要配置文件.
    uwsgi8800.ini  文件名随便取. 一般是 uwsgi+端口号

    ⦿ 新建 uwsgi 配置文件
        vi /home/mycms/uwsgi.ini

[uwsgi]
home = /home/djcmsenv
chdir = /home/mycms
module = mycms.wsgi
master = true
processes = 10
socket = /home/mycms/mycms.sock
chmod-socket    = 666
vacuum = true

    ⦿ 启动 uwsgi
        uwsgi --ini /home/mycms/uwsgi.ini 

    ⦿ 浏览器测试 http://www.0214.help:222/   出现 cms 的登录页面了.


🔸 虚拟环境.

    如果你的 dj项目 使用虚拟环境.那么你要知道
    ❗️如果要使用 uwsgi 那么不管是不是在虚拟环境中, 都必须指定虚拟环境路径❗️
    ❗️如果要使用 uwsgi 那么不管是不是在虚拟环境中, 都必须指定虚拟环境路径❗️
    ❗️如果要使用 uwsgi 那么不管是不是在虚拟环境中, 都必须指定虚拟环境路径❗️

    ⦿ 系统环境安装 uwsgi
        pip install uwsgi
            必须在 虚拟环境中 和 真实环境中同时装一遍 uwsgi 
            之前我们是在虚拟环境中装的. 现在要在系统环境中再安装一遍.

    ⦿ 运行uwsgi
        uwsgi --ini /home/mycms/uwsgi.ini --chmod-socket=666
            由于我们在配置文件中指定了 虚拟环境的路径. 
            所以命令行中就可以不用设置虚拟环境路径了.
            所以这个命令不在虚拟环境中也能运行.


🔸 排错

    重启服务器 
    然后用 uwsgi --ini /home/mycms/uwsgi.ini 
    浏览器测试失败.

    重启电脑后发现 nginx 没有启动
        可能是没有设置开机启动
        也有可能设置了开机启动.但是由于和apache也是开机启动的. 
        默认nginx 和 apache 都是用 80端口的. 
        系统启动时候 先启动了 apache. 使用了 80端口.
        然后再启动nginx 也要使用 80端口. 
        两者冲突导致nginx开机启动失败

    chkconfig --list   查看开启启动状态列表 没发现 apache啊.
    估计 不是用 chkconfing 方式自动启动的.




🔸 开机启动设置
    ⦿ 自动启动配置文件
        chmod 755 /etc/rc.d/rc.local
    
        vim /etc/rc.local
        在exit 0这一行之前加上下面这3句话

        service httpd stop
        service nginx start
        uwsgi --ini /home/mycms/uwsgi.ini

    ⦿ 浏览器测试 http://www.0214.help:222/   出现 cms 的登录页面了.






⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️------⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️
🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵 mycms 配置 🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵 
⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️------⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️

🔸 后台帐号创建

    cd /home/mycms && source /home/djcmsenv/bin/activate

        python manage.py createsuperuser

    然后网页登录 http://www.0214.help:222/

    自动弹出的框. 点击 new page  ➜ next ➜ title: home ➜ create
    现在你的网页 就有一个 About 链接了.. 
    实在太简陋了...  现在是涉及 html 前端的知识.. 
    简单点下个模板稍微修改下... 
    博客主要的是内容.. 外观么... 有精力可以搞搞..



🔸 bootstarp 插件安装.

    ⦿ 这个插件可以让你快速建立网页布局.

    cd /home/mycms && source /home/djcmsenv/bin/activate


    ⦿ 安装 bootstrap 第三方模块.
    pip install aldryn-bootstrap3

    ⦿ 配置
    vi /home/mycms/mycms/settings.py 
    添加 'aldryn_bootstrap3', 到 INSTALLED_APPS
    注意逗号.

    ⦿ 生成bootstrap插件所需的数据库表
    python /home/mycms/manage.py migrate

    ⦿ 重启服务器...

    ⦿ 测试
        就多了个..  bootstarp 插件可以用



🔸 首页修改.

⦿ 模板下载.

    • 模板地址  https://startbootstrap.com/template-overviews/modern-business/

    • 下载模板+解压+重命名
        cd / && wget https://github.com/BlackrockDigital/startbootstrap-modern-business/archive/gh-pages.zip && unzip gh-pages && mv startbootstrap-modern-business-gh-pages modern

⦿ 文件移动 css、font-awesome、fonts、js
    mv modern/css /home/mycms/mycms/static && mv modern/font-awesome /home/mycms/mycms/static && mv modern/fonts /home/mycms/mycms/static &&mv modern/js /home/mycms/mycms/static

⦿ 删除下载的模板
    rm -rf /modern


⦿ 删除djangocms 里无用模板:base+left+right
    留 fullwidth.html 因为这个是djangocms的默认模板,暂时不能删除

    cd /home/mycms/mycms/templates && rm -f /home/mycms/mycms/templates/base.html /home/mycms/mycms/templates/sidebar_left.html /home/mycms/mycms/templates/sidebar_right.html



⦿ 新建基础模板   
    vi /home/mycms/mycms/templates/base.html


{% load cms_tags menu_tags sekizai_tags staticfiles i18n %}
<!--为了使用模板的基本功能. 首先需要在最上方添加这行-->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="description" content="">
    <meta name="author" content="">

    <!-- 模板里调用静态文件 用下面的格式.-->
    <link href="{% static 'css/bootstrap.min.css' %}" rel="stylesheet">
    <link href="{% static 'css/modern-business.css' %}" rel="stylesheet">
    <link href="{% static 'font-awesome/css/font-awesome.min.css' %}" rel="stylesheet" type="text/css">

    <!--引入 djangocms 以及各种插件 所依赖的css文件-->
    {% render_block "css" %}

    <!--模板的标题-->
    <title>{% page_attribute 'page_title' %} - Xu.Jian </title>
</head>

<body>
    <!--cms 隐藏工具条-->
    {% cms_toolbar %}


    <!-- 网页导航条 -->
    <nav class="navbar navbar-inverse navbar-fixed-top" role="navigation">
        <div class="container">

            <!-- Brand and toggle get grouped for better mobile display -->
            <div class="navbar-header">
                <!--home 按钮-->
                <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#bs-example-navbar-collapse-1">
                    <span class="sr-only">Toggle navigation</span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                    <span class="icon-bar"></span>
                </button>
                <a class="navbar-brand" href="/">Home</a>
            </div>

            <!--导航条中的 home之外的按钮.-->
            <!-- Collect the nav links, forms, and other content for toggling -->
            <div class="collapse navbar-collapse" id="bs-example-navbar-collapse-1">
                <ul class="nav navbar-nav navbar-right">
                {% show_menu 0 100 100 100 %}
                </ul>
            </div>
            <!-- /.navbar-collapse -->
        </div>
        <!-- /.container -->
    </nav>


    <!--下面是网页的内容区域.  block xxx 就代表模块,  可以在模板里面用别的模板-->
    {% block content %}{% endblock %}

 
    <!--可以在 结构中 添加一个cate 区域.-->
    {% placeholder Cate %}
    {% placeholder Tage %}
    {% placeholder File %}



    <!-- Footer -->
    <footer>
        {% static_placeholder "Footer"%}
    </footer>
        
    <!-- jQuery -->
    <script src="{% static 'js/jquery.js' %}"></script>

    <!-- Bootstrap Core JavaScript -->
    <script src="{% static 'js/bootstrap.min.js' %}"></script>
        {% render_block "js" %}

</body>

</html>



⦿ 静态文件处理
    由于之前 静态文件路径改过了...
    所以要再一次运行复制 /home/mycms/mycms/static 新增文件到 /home/mycms/static

    source /home/djcmsenv/bin/activate && python /home/mycms/manage.py collectstatic

    

⦿ 测试网页. 
    http://www.0214.help:222/en/
    现在就有一个 漂亮的顶部导航条了: 左边是Home 右边是About
    其实模板就是一些静态文件 + 一个 bootstrap 的首页而已
    优点就是 可以适应所有设备. 自动改变网页宽度. 排版好看..

    接下来的网页就看你自己的了.





🔵 备份.
    vps 难免折腾..  
    博客算重要内容了.. 必须备份..
    两种备份方法: git 或者 lsync
    git 只要注册个帐号就能用了.
    lsync 需要你有一个公网IP的电脑.
    git的缺点是 手动备份. 要commint后才会备份.
    lsync 优点是 自动备份. 有任何修改就会自动同步到远端服务器.

🔸 git 备份.

git 安装      yum install git 
查看版本      git --version
初始化仓库    git init
当前仓库状态  git status

添加文件（.或者*表示全部添加）   git add .
提交代码  git commit -m "commit message" 
添加远程仓库   git remote add origin git@github.com:xxxx.git 
push本地代码到远程仓库  git push -u origin master 



🔸 GitHub 准备 
    ⦿ github 创建一个空仓库:mycms
        为了避免冲突，先不要勾选 README 和 LICENSE 选项

    ⦿ 获取仓库地址. 
        项目右上角 clone or download > 获取 https 地址.
        https://github.com/Xu-Jian/mycms.git



🔸 VPS 准备

    ⦿ 初始化仓库
        cd /home/mycms && git init
        mycms 下多了个 .git文件就说明成功了.
        下面我们要 所有文件 加到git仓库.

    ⦿ git add .
        可以用 .gitignore文件来添加不需要同步的文件

    ⦿ 提交修改(本地):  git commit -m "first commit"
        提交一次. 就可以还原.  不提交的内容是无法还原的.

    ⦿ 配置 github 用户名

        如果不用github的话.就上面几步了. 
        如果要用github的话 就得先配置 github的帐号密码.

        添加 github 用户名  $ git config --global user.name "Xu-Jian"
        添加 github 邮箱    $ git config --global user.email "xujian0219@126.com"



    ⦿ 配置 github 密钥
        需要在vps上单独生成一个密钥(用你的邮箱地址)! 不能用以前的.

        $ ssh-keygen -t rsa -C xujian0219@126.com
        一路回车 就会在 /root/.ssh/ 下面生成两个文件.
        一个 id_rsa 是私钥. 一个 id_rsa.pub 是公钥.

        然后去github 的系统设置 > ssh and gpg keys > new ssh key >
        要你输入 名称 和 key  名称随便. key 就是服务器的公钥里面的内容.

        复制公钥的所有内容. cat /root/.ssh/id_rsa.pub 到github的key 内容框里

    ⦿ 测试密钥设置
        $ ssh -T git@github.com
        如果成功设置 就会有个 
        Are you sure you want to continue connecting (yes/no)? 
        输入yes 就可以了


    ⦿ 查看仓库情况    git remote -v

    ⦿ 远程到github
        git push -u origin master

    ⦿ 查看同步情况
        现在去github 的 mycms项目. 就多出了本地的文件了. 同步成功!!!


















🔸 lsync 备份







