@: 2002-03-08-MySQL
---
layout: post
title: MySQL tags: 数据库
categories: IT-Admin
---


## MySQL

MySQL 重要目录　 
数据库文件 /var/lib/mysql/ 配置文件　 | /usr/share/mysql  |（mysql.server命令及配置文件）
相关命令   | /usr/bin          | (mysqladmin mysqldump等命令) 启动脚本   | /etc/rc.d/init.d/ |（启动脚本文件mysql的目录）


修改登录密码 - 命令 usr/bin/mysqladmin -u root password 'new-password' - 格式：mysqladmin -u用户名 -p旧密码 password 新密码 
'' - 例:   给root加密码123456  
[root@test1 local]\# /usr/bin/mysqladmin -u root password 123456 注：因为开始时root没有密码，所以-p可以省略。 
'' - 测试是否修改成功  
'' [root@test1 local]()\# mysql -u root -p   
'' Enter password: (输入修改后的密码123456)


## MySQL 常用操作
'' **注意：MySQL中每个命令后都要以分号；结尾。 ** 　　　　
### 显示数据库 
''     mysql> show databases;  
> - Mysql 自带有几个数据库
- Mysql库非常重要，它里面有MySQL的系统信息 我们改密码和新增用户，实际上就是在这个库中进行操作。

### 显示数据库表 
'' mysql\> use mysql; （先选择要使用的数据库）  
'' mysql\> show tables; (显示数据库中的表)
　　
### 显示数据表内容

'' 显示表内容:  select * from 表名;  
'' 
''     例：显示 mysql库 中 user表 的内容。(MySQL用户都在此表中)  
'' 
''     Select * from user; 　

### 新建数据库 
''     例：创建一个名字xujian 的数据库.
'' 
''         create database xujian; 


### 新建表结构.
- 只是帮你建一个表格框架,没有具体内容.
- 比如 明珠医院 护士联系表
	- 只建立 工号 姓名 性别 学位  数据类型/长度 和默认值. 
	- 不会有哪个护士的具体工号名字 什么的. 


- 命令格式 :
- create table 表名 (字段名 类型 数据宽度 是否为空 是否主键 自动增加 默认值)     实例:
	'' create table mzyy (  
	'' >id int(4) not null primary key auto_increment,
	'' >name char(20) not null,
	'' >sex int(4) not null default '0',
	'' >degree double(16,2));
	'' 
	'' 以上例子不能直接复制运行. 
	'' 原因是这个命令实在太长了,为了书写好看 把它分成好几行了.
	'' 终端里你 可以用 \+回车键 来另起一行 而不打断输入命令.

### 修改表结构 ( 增加,删除,修改字段 )
- 添加字段:
	'' 格式: alter table 表名 add 字段 类型 其他;  
	'' 
	'' 例: alter table mzyy add phone int(4) not null;
- 删除字段:
	'' 格式: alter table 表名 drop index phone;
  
- 修改字段:     格式: alter table 表名 chande 原名 新名 类型;
	'' 例子

### 查看表结构
'' mysql\> describe mzyy;
'' 
'' 
'' +-------+---------------+-----+---------+----------------+
'' | Field |       Type    | Null | Key | Default | Extra　　　|
'' +-------+---------------+-----+---------+----------------+
'' | id　　 | int(4)　      |　NO　| PRI | NULL　　| auto_increment |
'' | name　 | char(20)     |  NO　|　　 | NULL　　 |　　　　　　　　|
'' | sex　  | int(4)       |  NO　|　　 | 0    　　|　　　　　　　　|
'' | degree | double(16,2) | YES　|　　 | NULL　　 |　　　　　　　　|
'' +-------+---------------+-----+---------+----------------+
　
　
#### 表格内容
- 新加内容: insert into 表格名 values('字段1','字段2','字段3','字段4');

- insert into mzyy values('219','xujian','男','1971-10-01');





- 删除内容: delete from table 表格名 where id=1;









## 数据类型:

整数运算速度快 占内存少. 比较实用.  比如 123

包含小数点  要用 single double currency



| 数据类型 | 大小 ~<br>~ (字节) | 精度范围 |
|:---:|:---:|:---:|
|varchar||汉字用这个|
| Byte ~<br>~ 字节型 | 1 | 0-255 |
| Boolean ~<br>~ 布尔型/逻辑型 | 2 | True 或 False |
| Integer ~<br>~ 整数型 | 2 | -32,768 到 32767 |
| Long ~<br>~ 长整型 | 4 | -2,147,483,648 \~ 2,147,483,647 |
| Single ~<br>~ 单精度浮点型 | 4 | 负数范围:-3.402823E38 \~ -1.401298E-45 ~<br>~ 正数范围:1.401298E-45 \~ 3.402823E38 | | Double ~<br>~ 双精度浮点型 | 8 |负数范围: ~<br>~ -1.797,693,134,862,32E308 \~-4.940,656,458,412,47E-324~<br>~正数范围: ~<br>~ 4.940,656,458,412,47E-324 \~1.797,693,134,862,32E308  |
| Currency ~<br>~ 货币类型 | 8 |  -922,337,203,685,477.5808 \~ 922,337,203,685,477.5807|
| Date ~<br>~ 日期型 | 8 | 100年1月1日\~9999年12月31日 |















　
　　可用select命令来验证结果。
　　mysql\> select \* from name;
　　+----+------+------+------------+
　　| id | xm　 | xb　 | csny　　　 |
　　+----+------+------+------------+
　　|　1 | 张三 | 男　 | 1971-10-01 |
　　|　2 | 白云 | 女　 | 1972-05-20 |
　　+----+------+------+------------+
　　8、修改纪录
　　例如：将张三的出生年月改为1971-01-10
　　mysql\> update name set csny='1971-01-10' where xm='张三';
　　9、删除纪录
　　例如：删除张三的纪录。
　　mysql\> delete from name where xm='张三';
　　10、删库和删表 
　　drop database 库名; 
　　drop table 表名；
　　九、增加MySQL用户
　　格式：grant select on 数据库.\* to 用户名@登录主机 identified by "密码" 
例1、增加一个用户user\_1密码为123，让他可以在任何主机上登录，并对所有数据库有查询、插入、修改、删除的权限。首先用以root用户连入MySQL，然后键入以下命令：
　　mysql\> grant select,insert,update,delete on *.* to user\_1@"%" Identified by "123"; 
例1增加的用户是十分危险的，如果知道了user\_1的密码，那么他就可以在网上的任何一台电脑上登录你的MySQL数据库并对你的数据为所欲为了，解决办法见例2。
　　例2、增加一个用户user\_2密码为123,让此用户只可以在localhost上登录，并可以对数据库aaa进行查询、插入、修改、删除的 操作（localhost指本地主机，即MySQL数据库所在的那台主机），这样用户即使用知道user\_2的密码，他也无法从网上直接访问数据库，只能 通过MYSQL主机来操作aaa库。
　　mysql\>grant select,insert,update,delete on aaa.\* to user\_2@localhost identified by "123";
　　用新增的用户如果登录不了MySQL，在登录时用如下命令：
　　mysql -u user\_1 -p　-h 192.168.113.50　（-h后跟的是要登录主机的ip地址）
我们知道，在ms sql server中或access中， 若要查询前10条记录，使用top 10即可， 但在mysql中 不支持这个写法，它用limit 10。    
我们可以利用MySQL中 SELECT支持的一个子句——LIMIT——来完成这项功能。  LIMIT可以实现top N查询，也可以实现M至N（某一段）的记录查询，具体语法如下：  SELECT * FROM MYTABLE ORDER BY AFIELD  LIMIT offset, recnum 其中offset为从第几条（M+1）记录开始，recnum为返回的记录条数。例：  select * from mytable order by afield  limit 2, 5  即意为从第3条记录开始的5条记录。
　　
　　
十一. 常见问题：
1."Can't connect to local MySQL server through socket '/var/lib/mysql/mysql.sock' "错误
解决方法：
这是没启动mysql的守护进程，执行service mysqld start就行了
 


Mysql Tool:  phpmyadmin, navicast ....

Mysql 连接方式: 
- tcp/ip (通过ip/ssh 连接)
- socket (通过一个文件连接) 
	> 数据库工具和mysql 服务器在同一电脑时可用,速度比tcp 快
	> socket 文件路径: 终端:`mysql_config` 一般在 /tmp/mysql.sock


## 数据库管理



### Mysql 字段类型:

- 整数: tinyint smallint `int` bigint
- 小数: float double `decimal(m,d)` m 整个位长.d小数位长
- 字符: char `varchar` 弹性大小  最长255字符. 再长就用 备注型.
- 日期: 
	- datetime 日期+时间 2008 0918 12 00
	- date  只有日期 无时间 2008 0918
	- `timestamp`  日期转为数字.精度高.

- 备注: tinytext `text` longtext



### Mysql 基本操作:


建库: `create database xx;`
删库: `drop database xx;`


*汉字变问好:基本是 编码问题. 选 utf8 就可以了*

\`\`语句里面 必须用''  而不是 \`\`\`




改字段: rename table `原字段` to `新字段`
删字段: alert table `表` drop `原字段`
插字段: alert table `表` add `新字段` .. after `原字段.`




不能建空表. 必须写上一个字段 才能建表成功.
只有一个字段的话. 这个字段必须是主键: primary key
*主键字段下面的值是不能重复的*


`CREATE TABLE port (`
`  id int(10) not null AUTO_INCREMENT,`
`PRIMARY KEY (id)`
`)`

这个就是创建表的 最简单命令.
*auto—increment 就是自动增加字段*




`select * form calss` 
查询 class 表的 所有信息.

`select id,uid from calss`
查询 class 表里面 id 和 uid 的信息.

`selece yourClassname as name from class.`
别名.  名字太长了 浏览器显示不下 就要左右拖动 很麻烦.
这时候可以 把那个很长的名字.暂时变成很短的名字.方便浏览.



*查询 某几行 的数据. 而不是整个数据表.*

`select * form calss where id=2` 
只会出现 第二行信息.

等于 =
不等 \<\>
包含 in
不含 not in
匹配: like
范围内: between
范围外: not between
and or ()




`select * form calss where id in (1,2,4)`
只显示 124 行. 不显示第三行.
`select * form calss where id not in (1,2,4)`
显示不包含 124 行的结果

`select * form calss where 'uid' like '%王%'`
显示 uid 中 含有王字的 结果.
*`%` 前后匹配*

`select * form calss where id between 1 and 3`
显示1-3的内容
`select * form calss where id not between 1 and 3`
显示1-3之外的内容

`select * form calss where id=1 and 'name'='徐'`
同时满足 两个条件的 结果.




*排序语句:order by 正序(默认值 ASC )/倒序 desc*
这个肯定在 limit 之前. 也就是倒数第二的位置.

`select * form calss order by 'regdate' desc`
一般是按照id 排序. 可以自定义.
这个 就是按照 regdate 进行倒序排列.

`select * form calss order by 'regdate' desc, id desc`
多个参数. 多重排列. 同时满足....



*指针 Limit: 永远在语句最后面.* 显示多少条. 范围:
`select * form calss limit 3`
显示前3条. 默认是第一天开始. 
`select * form calss limit 0,3`
显示前3条.

`select * form calss limit 2,3`
显示2-3 条.



*分组语句: group by*
`select * form calss group by 'remark'`
按照 remark 字段 来分组: 发现只有 
学生 和工人 .




select
排序 分组 指针查询 计算
insert
update 修改/更新
delete





## Mysql 函数

count()   统计函数 有多少条信息.
max()   最大值 数字和日期有效.
min()  最小值
avg() 平均值
sum() 累计值

`select count(*) form calss`
这个表有多少条信息.

`select max(id) form calss`
id 中的 最大值.





*插入语句 注意字段类型.免得乱码*
insert into 表名(字段,字段2...)values(值,值2....)

id 字段累加字段 可以不写具体数字. 但是 要留''.

*值: now() 可以自动插入当前时间*


*更新语句:*
update class set id=3 where id=2
把id 2   改成3 .

*删除语句*
delete from class where id=1











## phpMyAdimn:
新建数据表. 输入名字. 和 字段数(几行). 就可以了.

具体小数字段:
类型: decimal 长度 8,3  就是总长8为. 3位是小数点.





@: 2002-03-08-MySQL Cluster 数据库集群
---
layout: post
title: MySQL Cluster 数据库集群 tags: 数据库
categories: IT-Admin
---

## MySQL Cluster 数据库集群


高性能 可扩展性 集群化数据库产品

研发的初衷 就是满足许多行业里 最严酷的应用要求.... 要求数据库可靠性 99.999%


是基于无共享的可由多台服务器组成的、同时对外提供数据管理服务的分布式集群系统。
通过合理的配置，可以将服务请求在多台物理机上分发实现负载均衡 ；
同时内部实现了冗余机制，在部分服务器宕机的情况下，整个集群对外提供的服务不受影响，从而能达到99.999%以上的高可用性。 

MySQL Cluster设计之初出于性能考虑，将数据完全存放在内存当中，因此MySQL Cluster可以当作一种分布式的内存数据库。

建议：
1.若是双主复制的模式，不用做数据拆分，那么就可以选择MHA或 Keepalive 或 heartbeat
2.若是双主复制，还做了数据的拆分，则可以考虑采用Cobar；
3.若是双主复制+Slave，还做了数据的拆分，需要读写分类，可以考虑Amoeba；

先了解一下你是否应该用MySQL集群。
减少数据中心结点压力和大数据量处理，采用把MySQL分布，一个或多个application对应一个MySQL数据库。把几个MySQL数据库公用的数据做出共享数据，例如购物车，用户对象等等，存在数据结点里面。其他不共享的数据还维持在各自分布的MySQL数据库本身中。



Management Node(管理节点)：mysql集群全局的管理者，整个集群只有一个management node,负责管理集群架构中的其他Nodes(节点)，包括控制其他节点的启停，查看节点状态等。另外还维护了集群的全局配置信息，因此在整个集群环境中应该优先于所有节点启动。管理节点启动命令为ndb\_mgmd.
Data Node(数据节点)：数据的存储节点，集群中会有多个Data Node，每个节点存储数据多个数据副本。虽然mysql集群可以设置副本数量为1，即集群没有数据冗余，所有节点的只存储各自数据片段的副本，但是这样的集群也就失去了意义，所以为了保证高可用性，建议最好是设定副本数量至少为2，或者更大，一份用于存储，一份作为冗余。系统默认值为2. 冗余副本数量越大，需要的节点数就会越多。Data node 节点启动命令为ndbd.关于存储副本的概念参考图-02（来自官网）也许有助于理解副本、冗余的含义和作用。


如果单MySQL的优化始终还是顶不住压力时，
这个时候我们就必须考虑MySQL的高可用架构(很多同学也爱说成是MySQL集群)了，
目前可行的方案有： 
一、MySQL Cluster 优势：可用性非常高，性能非常好。每份数据至少可在不同主机存一份拷贝，且冗余数据拷贝实时同步。但它的维护非常复杂，存在部分Bug，目前还不适合比较核心的线上系统，所以这个我不推荐。 
二、DRBD磁盘网络镜像方案 优势：软件功能强大，数据可在底层快设备级别跨物理主机镜像，且可根据性能和可靠性要求配置不同级别的同步。IO操作保持顺序，可满足数据库对数据一致性的苛刻要求。但非分布式文件系统环境无法支持镜像数据同时可见，性能和可靠性两者相互矛盾，无法适用于性能和可靠性要求都比较苛刻的环境，维护成本高于MySQL Replication。另外，DRBD也是官方推荐的可用于MySQL高可用方案之一，所以这个大家可根据实际环境来考虑是否部署。 
三、MySQL Replication 在实际应用场景中，MySQL Replication是使用最为广泛的一种提高系统扩展性的设计手段。众多的MySQL使用者通过Replication功能提升系统的扩展性后，通过简单的增加价格低廉的硬件设备成倍 甚至成数量级地提高了原有系统的性能，是广大MySQL中低端使用者非常喜欢的功能之一，也是许多MySQL使用者选择MySQL最为重要的原因。
比较常规的MySQL Replication架构也有好几种，这里分别简单说明下
MySQL Replication架构一：
             常规复制架构--Master-slaves，是由一个Master复制到一个或多个Salve的架构模式，主要用于读压力大的应用数据库端廉价扩展解决方案，读写分离，Master主要负责写方面的压力。 
MySQL Replication架构二：
             级联复制架构，即Master-Slaves-Slaves,这个也是为了防止Slaves的读压力过大，而配置一层二级 Slaves，很容易解决Master端因为附属slave太多而成为瓶劲的风险。 MySQL Replication架构三：
             Dual Master与级联复制结合架构，即Master-Master-Slaves，最大的好处是既可以避免主Master的写操作受到Slave集群的复制带来的影响，而且保证了主Master的单点故障。 以上就是比较常见的MySQL replication架构方案，大家可根据自己公司的具体环境来设计 ，Mysql 负载均衡可考虑用LVS或Haproxy来做，高可用HA软件我推荐Heartbeat。
 
MySQL Replication的不足：
          如果Master主机硬件故障无法恢复，则可能造成部分未传送到slave端的数据丢失。所以大家应该根据自己目前的网络规划，选择自己合理的Mysql架构方案，跟自己的MySQL DBA和程序员多沟涌，多备份(备份我至少会做到本地和异地双备份)，多测试，数据的事是最大的事，出不得半点差错，切记切记。







