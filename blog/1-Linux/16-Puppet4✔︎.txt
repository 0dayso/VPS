🔵 简介
                                  ❤️❤️️❤️ Puppet 极品入门教程 ❤️❤️❤️
     http://www.zsythink.net/archives/category/%E8%BF%90%E7%BB%B4%E7%9B%B8%E5%85%B3/puppet/

                ❗️❗️❗️❗️❗️❗️安装puppet-server 会自动安装 puppet-agent.❗️❗️❗️❗️❗️❗️
                ❗️❗️❗️❗️❗️❗️安装puppet-server 会自动安装 puppet-agent.❗️❗️❗️❗️❗️❗️
                          不管什么电脑要用puppet安装 puppet-server 就对了.
                           所以: 服务器尽量安装最新版本. 客户端相对无所谓.


                        📌别在Mac上折腾 puppet-agent. 我反正半天没折腾成功📌
    🔸目的: 在无公网IP的Centos7虚拟机上搭建 puppet-server 服务器. 控制有公网IP的 vps.(puppet-agent)🔸






🔵 三个组件:
    🔸puppet-server    Puppet Server. 会自动安装 puppet-agent!!!
    🔸puppet-agent     多合一安装包.会安装 Puppet-agent, Ruby, Facter.等各种依赖.
                       👁‍🗨Facter 获取客户端数据并传给服务器.
    🔸puppetdb         数据库. 可以更好的使用 puppet.

        Puppet: C/S架构软件.
            📌服务器一般要安装 puppet-server
            📌客户端一般也安装 puppet-server 反正会自动安装puppet-agent的.       


🔵 目录
    🔸软件安装目录               /opt/puppetlabs
    🔸执行文件目录               /opt/puppetlabs/bin
    🔸puppet-agent  配置文件     /etc/puppetlabs/puppet/puppet.conf    
    🔸puppet-server 配置文件     /etc/puppetlabs/puppetserver/puppetserver.conf
    🔸agent  ssl证书存放目录         /etc/puppetlabs/puppet/ssl            
    🔸server ssl证书存放目录         /etc/puppetlabs/puppetserver/ssl            
    🔸所有的module/manifest/data从confdir 移到/etc/puppetlabs/code
        包含environments目录
        包含全局的modules目录



🔵 Puppet 工作流程

    puppet是批量管理服务器的, 比如要安装/输出/更新软件、新建/删除用户、启动/停止进程...
    所有的配置文件都是储存在服务器中.客户端每半小时连一次服务器. 看服务器上面的配置文件是否有更新.
    如果有更新.就下载配置文件.然后在本地执行

    客户端的facter 会获取客户端自己电脑的信息(如主机名，内存大小，ip地址等) 发送给服务器.
    服务器的facter 根据客户端主机名.在服务器配置文件中找到对应的配置.来分析客户端是否成功执行

    客户端和服务器之间的通信是基于SSL证书的.
    任何客户端都可以请求连接服务器. 但是只有在服务器同意后才可以和服务器通信!!

    puppet  会让系统保持在人们所期望的某种状态并一直维持下去.例如：
        保证某个文件一直存在， 如果该文件被删除了   puppet下次执行时（默认30分钟）会重新创建文件.
        保证ssh服务始终开启，  如果ssh服务被关闭了  puppet下次执行时（默认30分钟）会重启ssh服务.





🔵 常用命令

    🔅puppet help 查看各种命令.

    🔅puppet help agent              查看agent该子命令的详细用法.
        puppet agent -V/--version    查看版本
        puppet agent --verbose/-v    详细输出命令.  
        puppet agent --test / -t     测试连接.
        puppet agent --noop          模拟运行.

    🔸证书相关命令:.
        puppet cert list                     列出未签名请求. (未签名最前面没有+号)
        puppet cert list --all               列出所有的签名. 包括已签名的(已签名最前面有个+号)
        puppet cert sign host2.example.com   给某个客户端请求进行签名(服务器上操作).
        puppet cert sign --all               给所有客户端请求进行签名(服务器上操作).


        ss -tlunp | grep puppet           查看puppet的端口 默认8140
        👁‍🗨 升级版本. 先卸载(yum remove puppet-server) 再安装






⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️❤️软件安装❤️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️

⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️❤️软件安装❤️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️
❤️CentOS6 安装 (详细)

    🔵依赖环境
        🔸 lsb_release -a                查看系统版本. ➜  Description:	CentOS release 6.9 (Final)
        🔸 uname -a                      查看系统是32位还是64位. 只有输出是x86_64 才是64位的. 其他都是32位的!!!!
        🔸 yum install ruby ruby-rdoc    安装ruby环境.
        🔸 添加puppet 的官方yum源.
            rpm -ivh https://yum.puppetlabs.com/puppetlabs-release-pc1-el-6.noarch.rpm
            ❗️❗️这个PC1源(Puppet Collections)才可以安装4.+版本 ❗️❗️

                    rpm -ivh http://yum.puppetlabs.com/puppetlabs-release-el-6.noarch.rpm
                    👁‍🗨 这个源最高只能安装 3.8.7的版本!! 别用这个源.

                    👹 package puppetlabs-release-22.0-2.noarch is already installed
                    如果出现 xxx is already installed 类似提示.  用 rpm --force -i  ✚ 网址 强制安装.
                    rpm --force -i https://yum.puppetlabs.com/puppetlabs-release-pc1-el-6.noarch.rpm

    🔵安装puppet-server
        🔸yum install puppetserver
            👁‍🗨 4+ 版本和3+的安装命令是不一样的 3+ 的好像是: yum install puppetmaster
            Server默认对内存要求高得2G... 256m的vps跑个客户端就可以了别跑服务端了...
        🔸 配置环境路径
                安装好后你会发现不能执行puppet命令!
                    👁‍🗨 如果你用的是 3.8.7 的那个源是可以直接使用puppet命令的.也就不需要配置环境路径. 
                正常 puppet agent -V 就能显示当前客户端版本的.
                📌Puppet4 的变化比较大. 
                    👁‍🗨 配置路径: /etc/pupperlabs
                    👁‍🗨 程序路径: /opt/puppetlabs
                直接去程序安装路径去看看能不能执行.
                cd /opt/puppetlabs/bin
                ./puppet agent -V
                    这下就显示出当前版本了!说明安装成功的.自己配下环境路径就好了. 
                    这一这个命令前的 ./ 这个表示当前文件夹!!!!

                下面我们手动把 /opt/puppetlabs/bin   这个路径添加到环境路径中!!
                以后任何位置都可以运行puppet命令了. 而不是必须cd到puppet的安装路径下才能运行puppet命令.
                环境路径 和你使用的sehll有关. 
                我用zsh 那么只要在  ~/.zshrc 这个文件里加下面行.然后重启shell生效.
                export PATH=/opt/puppetlabs/bin:$PATH
                在文件尾部添加一行 最简单的方法是使用echo. 当然你也可以手动vi添加.
                🔅 echo 'export PATH=/opt/puppetlabs/bin:$PATH' >> ~/.zshrc
                👁‍🗨 这里必须用 单引号. 单引号里面的内容才会一模一样的追加到文件中.不然$PATH这个变量会展开.
                👁‍🗨 添加变量后记得重启shell. 服务器的话.断开ssh 重新连就可以了.

                

⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️❤️ FRP 内网穿透设置❤️ ️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️
    角色           系统             IP地址    安装软件           主机名.
    puppet-server  Centos7(虚拟机)  内网IP    puppet-server      VM-C7     
    puppet-agent   Centos6(VPS)     公网IP    puppwt-agent       mail.0214.help 

要使用 puppet. 必须保证 双方能用域名互相解析到. 
因为 puppet 是通过  VM-C7 和 mail.0214.help  主机名来互相交流的!

🔵 如果 puppet-server 和 puppet-agent 都在一个局域网内. 比如:
    puppet-server 的IP地址是 192.168.1.1, 主机名是 master
    puppet-agent  的IP地址是 192.168.1.2, 主机名是 client

    那么域名解析非常简单.
        只要在puppet-server 的hosts文件添加一行: 192.168.1.2  client
            添加后你去puppet-server 电脑开终端 ping client 就是ping 192.168.1.2

        只要在puppet-agent 的hosts文件添加一行: 192.168.1.1  master
            添加后你去puppet-agent 电脑开终端 ping master 就是ping 192.168.1.1

        这就是域名解析. 也就是把一个名字 对应到一个IP上. 就这么简单.

🔵 如果 puppet-server 和 puppet-agent 不在一个局域网内.比如:
    puppet-server 的内网IP地址是 192.168.1.1,  主机名是 VM-C7
    puppet-agent  的公网IP地址是 23.105.192.96 主机名是 mail.0214.help
    要实现互相解析就需要对网络 和 puppet 有点了解了. 需要借助内网穿透工具.推荐用frp. 
    两台puppet表面上是通过 域名来互相交流的. 实际上是通过IP来互相交流的.
    用域名只是为了方便人类记忆. 好比 姓名和身份证号码. 肯定是姓名容易记啊..

    再深入一点. 服务器可以同时运行很多软件.一般一个服务器也就一个外网IP.
    电脑上的每个软件只用了IP的几个端口而已.
    比如网页:   http 的80端口、https 的443端口.
    比如puppet: puppet-server 的8140端口. puppet-agent 的8139端口.

    其实 puppet-server 和 puppet-agent 之间用的是 http 协议.
    puppet-agent 通过电脑上的8139端口 发消息给 puppet-server 上的8140端口.
    既然端口是确定的. 我们不用管.那么我们只要解决IP问题就好了. 
    puppet-agent 服务器是本身带有公网IP的. 任何电脑要解析到puppet-agent很简单.  解析可以理解成连接. 比如ssh连接.
    puppet-server 是内网电脑.没有IP的.     任何电脑要解析到puppet-server就很难. 用了 frp就很简单!!!
    frp 原理这里不说. 自己看 frp.txt去.


🔵 FRP服务器设置 (Centos6 VPS 公网IP: 23.105.192.96)
    vi frps.ini                 ➜ 编辑frp服务器配置文件,添加下面三行: 
    [vm-centos7-puppetserver]   ➜ 模块名字. 名字任意取.但是必须和frp客户端配置文件中的模块名一样.
    auth_token = 123            ➜ 密码. 服务器和客户端 交流要先对比密码的. 双方密码一直才可以成功连上服务器.
    listen_port = 8140          ➜ 这个就是重点了. 这个是frp服务器端口.
                                ➜ 如果有人访问23.105.192.96:8140 首先是连接到frp服务器这台电脑.
                                ➜ 然后frp服务器就会把这个端口的所有数据转发给我们等下就去设置的客户端.
                                ➜ 文件编辑好后需要重启frp服务.

    🔸 pidof frps                    ➜ 找出frps进程: 
    🔸 kill xxx                      ➜ 杀死frps进程. 也就是停止程序了.
    🔸 ./frps -c ./frps.ini          ➜ 测试启动. 有错误会报错! 没报错再用下面的命令进行后台长期运行..
    🔸 nohup ./frps -c ./frps.ini &  ➜ 后台运行.断开ssh也没关系.



🔵 FRP客户端设置 (puppet-server Centos7 虚拟机)
    🔸下载对应的客户端 wget https://github.com/fatedier/frp/releases/download/v0.9.3/frp_0.9.3_linux_386.tar.gz
    🔸 解压文件        tar -xzf 
    🔸 vi frpc.ini  编辑frp客户端配置文件
    [common]                       ➜ 别动; 连接FRP服务器的模块名称.
    server_addr = 23.105.192.96    ➜ 修改; FRP服务器IP    
    server_port = 7000             ➜ 不管; FRP服务器端口. 

    auth_token = 123               ➜ 不管
    privilege_token = 12345678     ➜ 不管

    [vm-centos7-puppetserver]      ➜ 重点! 这个需要和FRP服务器上的模块名对应.
    local_port = 8140              ➜ 重点! 任何数据访问服务器上的 8140端口 23.105.192.96:8140 
                                        FRP服务器 就会把数据转发到这台电脑. 但是这台电脑有很多端口. 
                                        local_port=8140的意思就是 转发到8140这个端口
                                        现在别的iFFmpeg按钮表面上是访问的 23.105.192.96:8140 
                                        其实经过frp服务器在中转后 实际就变成了访问 puppet-server的8140端口了.
                                        也就是别的电脑想要连接到 pupper-server.
    🔸nohup ./frpc -c ./frpc.ini &  ➜ 后台启动frp 客户端





⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️ 域名解析 ⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️

🔸 关闭 SELINUX
    Security-Enhanced Linux的缩写，是一种非常安全的LINUX模式。
    基本上用户得不到什么权限在这个系统下面。
    🔅  /usr/sbin/sestatus -v                     ➜ 查看当前SELINUX状态. 
        vi /etc/selinux/config                    ➜ 修改这个文件来永久关闭SELINUX
        将SELINUX=enforcing改为SELINUX=disabled   ➜ 修改后重启电脑.


🔸 新手关闭防火墙.

🔸 时间设置
       Puppet的master节点的时间必须设置准确，因为他将用于证书签发.尽可能的使用NTP.

🔸Cent0s7 更改主机名:
        hostname                                      ➜ 查看当前主机名.
        sudo hostnamectl --static set-hostname VM-C7  ➜ 永久更改主机名成VM-C7


🔸puppet-agent域名解析
    vi /etc/hosts         
    23.105.192.96 VM-C7 ➜  添加这行就可以了. 你不用管端口的 
                        ➜ 这个电脑运行的是puppet-agent 那么它肯定是去连接服务器的.肯定是去连接8140端口的.
                        ➜ 23.105.192.96:8140 端口的所有数据.都会被frp服务器.转个puppet-server的8140端口.

🔸 编辑puppet-agent配置文件. 在[agent]模块下添加下面一行.
    vi /etc/puppetlabs/puppet/puppet.conf
    server = VM-C7      ➜ 这个就是你要连接的 puppet-server 的主机名/域名
                        ➜ puppet-agent 是连到叫这个名字的服务器上的. 
                        ➜ 这个名字对应的ip 就是我们hosts文件里添加的dns解析

🔸 puppet-agent 连接服务器测试
    🔅 puppet agent --test
    Info: Creating a new SSL key for mail.0214.help

    puppet 为了信息安全. 双方采用了SSL协议. 也就是https. 需要用到证书!
    客户端运行 就自动会向服务器申请建立连接. 
    这时候要去服务器同意客户端的连接.客户端才能真正连上服务器.
    同意连接这个操作就叫签名.
    服务器和客户端就会长期保持通信(客户端每半小时连一次服务器)!!!


🔸 puppet-server 服务器查看客户端连接请求
    🔅puppet cert list
      "mail.0214.help" (SHA256) 6E:3F:48:F6:F1:52:18:30:F8:DD:2F:D3:7E:BA:C1:2E:1E:89:8A:0D:37:96:DF:E3:F5:79:A0:7F:85:5C:28:97
      出现一个 前面没带加号的 就说明有客户端想要连服务器.如果你同意对方连接 就需要签名.

🔸 puppet-server 对客户端请求进行签名
    🔅puppet cert sign mail.0214.help
    Signing Certificate Request for:
    "mail.0214.help" (SHA256) 6E:3F:48:F6:F1:52:18:30:F8:DD:2F:D3:7E:BA:C1:2E:1E:89:8A:0D:37:96:DF:E3:F5:79:A0:7F:85:5C:28:97
    Notice: Signed certificate request for mail.0214.help
    Notice: Removing file Puppet::SSL::CertificateRequest mail.0214.help at '/etc/puppetlabs/puppet/ssl/ca/requests/mail.0214.help.pem'


🔸puppet-server 查看所有证书
    🔅requests puppet cert list -all
    + "mail.0214.help" (SHA256) 4D:01:04:D7:4B:C8:75:D6:C2:D5:63:BA:93:46:C2:E1:D9:82:D6:97:AA:AC:A8:50:69:9F:6A:A8:67:27:67:F2
    + "mail.0214.live" (SHA256) D3:D7:DB:74:E6:53:CC:0F:EE:55:83:5E:65:A5:9B:32:4B:D6:9F:E5:DA:D1:50:67:88:31:3C:44:EE:C0:EE:92

🔸puppet-server 失效某证书  puppet cert --revoke mail.0214.live
🔸puppet-server 删除某证书  puppet cert --clean mail.0214.live
    ❗️❗️证书签名的过期或删除需要重启puppetmaster服务。❗️❗️
    sudo systemctl restart puppetserver

🔸puppet-agent 连接设置.
    ➜  puppet puppet agent --test
    Error: Could not request certificate: The certificate retrieved from the master does not match the agent's private key.
    Certificate fingerprint: 4D:01:04:D7:4B:C8:75:D6:C2:D5:63:BA:93:46:C2:E1:D9:82:D6:97:AA:AC:A8:50:69:9F:6A:A8:67:27:67:F2
    To fix this, remove the certificate from both the master and the agent and then start a puppet run, which will automatically regenerate a certificate.
    On the master:
    puppet cert clean mail.0214.help
    On the agent:
    1a. On most platforms: find /etc/puppetlabs/puppet/ssl -name mail.0214.help.pem -delete
    1b. On Windows: del "\etc\puppetlabs\puppet\ssl\certs\mail.0214.help.pem" /f
    2. puppet agent -t


    📌如果客户端连接服务器出问题. 
    📌 1. 首先排除frp问题. 看frps/frpc 服务是否正常运行
    📌 2. 进行下面的步骤
    📌还不行就重装客户端.   还不行就重装服务器.  再不行就自己分析问题原因了.
    1. 客户端: rm -rf /etc/puppetlabs/puppet/ssl/*     删除ssl文件夹所有内容. 不要只删除某个文件.
    3. 服务器: puppet cert clean mail.0214.help        删除证书. 
    4. 服务器️:️ puppetserver reload ️ ️ ️ ️ ️ ️ ️ ️ ️ ️ ️ ️ ️ ️       删除/失效某证书后必须重启服务器
    5. 客户端: puppet agent --test                     重新申请证书.
    6. 服务器: puppet cert list                        列出客户端的请求
    7. 服务器: puppet cert sign mail.0214.help         对mail.0214.help 这客户端进行签名.
    8. 客户端: puppet agent --test                     重新请求连接.
        👹 Info: Caching certificate for mail.0214.help
        Error: Could not request certificate: 
        Server hostname 'VM-C7' did not match server certificate; 
        expected one of localhost.localdomain, DNS:puppet, DNS:localhost.localdomain
        Exiting; failed to retrieve certificate and waitforcert is disabled
            又报错了...  服务器的名字 和服务器的证书不服.
            问题出在服务器. 其实服务器是改过主机名字的. 
            原来名字是 localhost.localdomain 安装好puppetserver后改成VM-C7了.
            其实puppetserver 安装的时候是需要生成服务端证书的! 生成证书肯定用到主机名的. 
            这时候用的主机名是localhost.localdomain.  对应服务器证书上的主机名是localhost.localdomain
            🔸解决方法一: 卸载重装.puppet-server

            🔸解决方法二: 客户端: 添加参数. --server 
                ➜  ~ puppet agent --test --server localhost.localdomain
                Info: Caching certificate_revocation_list for ca
                Info: Using configured environment 'production'
                Info: Retrieving pluginfacts
                Info: Retrieving plugin
                Info: Caching catalog for mail.0214.help
                Info: Applying configuration version '1492656142'
                Info: Creating state file /opt/puppetlabs/puppet/cache/state/state.yaml

            🔸解决方法三: 
                编辑客户端的配置文件 [anent] 下面的server name 改掉
                vi /etc/puppetlabs/puppet/puppet.conf
                server = localhost.localdomain

                还要添加 一条域名解析..
                vi /etc/hosts
                23.105.192.96 localhost.localdomain

                ➜  puppet puppet agent -t
                Info: Using configured environment 'production'
                Info: Retrieving pluginfacts
                Info: Retrieving plugin
                Info: Caching catalog for mail.0214.help
                Info: Applying configuration version '1492656538'
                Notice: Applied catalog in 0.02 seconds




⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️------⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️
首先 你得大概知道puppet 有多少子命令. 每个puppet 子命令又有哪些action..
✘✘∙𝒗 pp puppet help

Usage: puppet <subcommand> [options] <action> [options]

Available subcommands:

  agent             The puppet agent daemon
  apply             Apply Puppet manifests locally
                    ➜ 在客户端本地运行xx.pp 

  cert              Manage certificates and requests
                    ➜ 证书相关命令.

  config            Interact with Puppet's settings.
 
  facts             Retrieve and store facts.

  lookup            Data in modules lookup function

  master            The puppet master daemon
  module            Creates, installs and searches for modules on the Puppet Forge.

  node              View and manage node definitions.
  parser            Interact directly with the parser.
  plugin            Interact with the Puppet plugin system.









🔵 puppet apply 

puppet agent 客户端默认都是从服务器下载配置文件.然后再执行这个配置文件.
puppet apply 客户端当然也可以不从服务器下载.而是直接运行本地的配置文件.

🔸配置文件:
config.pp
class puppet::config{
  include puppet::params
  file { '/etc/puppet/puppet.conf':
    ensure  => present,
    content => template('puppet/puppet.conf.erb'),
    owner   => 'root',
    group   => 'root',
    mode    => '0644',
    require => Class['puppet::install'],
    notify  => Class['puppet::service'],  #配置更新后主动通过puppet服务重启
  }
}

🔸 模拟执行这个配置文件.
✘✘∙𝒗 pp puppet apply config.pp --noop --verbose


















⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️------⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️
🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵 GCE(CentOS7_x64) puppet-server 🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵
⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️------⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️
🔸 其他设置

    ⦿ CentOS 更改主机名:
        hostname                                      ➜ 查看当前主机名.
        sudo hostnamectl --static set-hostname gce    ➜ 永久更改主机名成gce


🔸 安装&配置

    ⦿ puppet官方yum源: 
        https://yum.puppetlabs.com/
    ⦿ Centos6 添加puppet 的官方yum源.
        rpm -ivh https://yum.puppetlabs.com/puppetlabs-release-pc1-el-6.noarch.rpm
    ⦿ Centos7 添加puppet 的官方yum源.
        rpm -ivh https://yum.puppetlabs.com/puppetlabs-release-pc1-el-7.noarch.rpm
        👁‍🗨 只要选一个.  根据centos 版本选就可以了

    ⦿ 安装ruby环境             yum install ruby ruby-rdoc -y
    ⦿ 安装 puppet-server       yum install puppetserver -y

    ⦿ 配置环境路径(zsh)        echo 'export PATH=/opt/puppetlabs/bin:$PATH' >> ~/.zshrc
    ⦿ 配置环境路径(bash)       echo 'export PATH=/opt/puppetlabs/bin:$PATH' >> ~/.bash_profile
    ⦿ 重新加载 zsh 配置文件    source ~/.zshrc

    ⦿ 查看 puppet agent 版本   puppet agent -V

    ⦿ ❗️修改内存要求(服务端)❗️    
        默认最低2G的内存. 不然就启动不了! 只能手动修改内存要求.
        随便你改. 可以是256m 也可以是1g. 建议分配多点..
        vi /etc/sysconfig/puppetserver 
            JAVA_ARGS="-Xms2g -Xmx2g"  ➜ JAVA_ARGS="-Xms256m -Xmx256m"
            JAVA_ARGS="-Xms2g -Xmx2g"  ➜ JAVA_ARGS="-Xms1g -Xmx1g"

    ⦿ 查看puppetserver 运行状态     systemctl status puppetserver
    ⦿ 启动puppet-server             sudo systemctl start puppetserver
    ⦿ 开机启动                      sudo systemctl enable puppetserver

    ⦿ 判断 puppet-server 8140端口是否开启
        netstat -nlatp | grep 8140
        nmap -p 8140 127.0.0.1 






⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️------⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️
🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵 VPS2 (CentOS7_x64) puppet-agent  🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵
⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️------⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️
❗️❗️域名设置.  主机名字不重要! 只要能解析到 服务器的IP就行.❗️❗️
比如服务器的IP是 104.224.139.45
www.0214.live 和 ss.0214.live 都是指向 104.224.139.45的.
那么 主机名. 选择www.0214.live 或者 ss.0214.live 都可以.






🔸 其他设置

    ⦿ CentOS 更改主机名:
        hostname                                      ➜ 查看当前主机名.
        sudo hostnamectl --static set-hostname VPS2   ➜ 永久更改主机名成vps2

        👹 Warning: Server hostname 'gce' did not match server certificate; expected one of gce.c.cloudpan-172312.internal, DNS:puppet, DNS:gce.c.cloudpan-172312.internal
        用gce的服务器要注意了.   gce 服务器的主机名 不是 hostname 查询出来的主机名.
        而是类似 这样的格式. gce.c.cloudpan-172312.internal


        👹 帮瓦工 vps
        改名直接去控制面板改.




🔸 安装&配置


    ⦿ Centos7 添加puppet 的官方yum源.
        rpm -ivh https://yum.puppetlabs.com/puppetlabs-release-pc1-el-7.noarch.rpm

    ⦿ 安装 puppet-agent     sudo yum -y install puppet-agent

    ⦿ 配置环境路径(zsh)        echo 'export PATH=/opt/puppetlabs/bin:$PATH' >> ~/.zshrc
    ⦿ 配置环境路径(bash)       echo 'export PATH=/opt/puppetlabs/bin:$PATH' >> ~/.bash_profile
    ⦿ 重新加载 zsh 配置文件    source ~/.zshrc

    ⦿ 查看 puppet agent 版本   puppet agent -V

    ⦿ 开启客户端: 
        sudo /opt/puppetlabs/bin/puppet resource service puppet ensure=running enable=true


    ⦿ 域名解析
        vi /etc/hosts 
        35.194.128.92 gce.c.cloudpan-172312.internal

    ⦿ 编辑puppet-agent配置文件. 
        vi /etc/puppetlabs/puppet/puppet.conf  在添加下面两行.

        [agent]
        server = gce.c.cloudpan-172312.internal


🔸 puppet-agent 连接测试
    puppet agent --test


    客户端第一次连接服务器要先获得服务器的允许后才能连接服务器.
    要去服务器同意先.


    安装过程中也遇到一些问题，主要都是DNS导致。
    一开始 直接用hosts 来配置是最简便的，把server的ip指定为puppet域名

    ✘✘∙𝒗2 ~ ➜ puppet agent --test
    Info: Caching certificate_revocation_list for ca
    Info: Using configured environment 'production'
    Info: Retrieving pluginfacts
    Info: Retrieving plugin
    Info: Caching catalog for vps2.localdomain
    Info: Applying configuration version '1500102434'
    Notice: Applied catalog in 0.03 seconds






⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️------⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️
🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵 重置 🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵
⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️------⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️




⦿ 双方删除证书
    • 客户端: rm -rf /etc/puppetlabs/puppet/ssl     删除ssl文件夹所有内容
        
    • 服务器: 
        puppet cert list                            显示未签名证书.
        puppet cert list --all                      显示所有证书.
        puppet cert clean vps2.localdomain          删除对应证书. 
        puppetserver reload ️ ️ ️ ️ ️ ️ ️ ️ ️ ️ ️ ️ ️ ️           删除/失效某证书后必须重启服务器

    • 客户端: puppet agent --test                   重新申请证书.
    
    • 服务器: puppet cert list                      列出客户端的请求
    • 服务器: puppet cert sign vps2.localdomain     对mail.0214.help 这客户端进行签名.
    
    • 客户端: puppet agent --test                   重新请求连接.




Error: Could not retrieve catalog from remote server: Error 500 on SERVER: Server Error: Permission denied - /opt/puppetlabs/server/data/puppetserver/yaml/facts/vps2.localdomain.yaml20170716-16059-lvojb3.lock



✘✘∙GCE manifests ➜ cd /opt/puppetlabs/server/data/puppetserver/yaml/facts/
✘✘∙GCE facts ➜ ls
total 8
-rw-rw---- 1 root root 8016 Jul 15 16:49 vps2.localdomain.yaml
✘✘∙GCE facts ➜
✘✘∙GCE facts ➜ rm vps2.localdomain.yaml

⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️------⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️
🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵 使用 🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵
⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️------⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️
经过千辛万苦客户端终于成功连上服务器了.环境算搭好了.我们来看看怎么用.

Puppet 可以单机使用(测试用). 一般都是多机器使用

    📌 Puppet 两种执行模式:
        直接读取puppet file.manifest配置
        通过puppetd --server puppetmaster.server.com，从服务端下载manifest配置








服务器只有一台. 客户端可以有千万台. 
所有客户端 都先查看 site.pp 这个总的配置文件.
这个配置文件里 可以给每个客户端进行不同的配置.


🔸 作用.
    可以在客户端运行命令、运行脚本 等等操作.

如 创建一个 xu用户.
user{'11':
    name => xu,
    ensure => present,
}






🔸 节点
    域名只要 客户端ping 服务器名. 能正确解析到服务器ip就可以.
    

    vps2. 104.224.139.45

    gce.c.cloudpan-172312.internal

    vps2.localdomain
    vps2.localdomain



🔸 site.pp 
    就是节点的配置文件，里面可以包含对各个节点的配置描述。
    在实例配置文件中，”puppetagent”就是节点的主机名。
    包含在 puppetagent 中的配置描述就是该节点的资源集合的描述。

默认在所有节点执行命令.


指定节点运行特定命令: 
node 'mail.0214.help'{
  include  motd
}


node slave01 {
  file {
    "/tmp/testpuppet": #在slave节点上创建该文件
    content=>"good morning!\n"; #文件中打印如下内容
  }
}







🔸 第一个配置文件. ✔︎
    在客户端新建一个文件.并写入内容.

    • 服务器
        vi /etc/puppetlabs/code/environments/production/manifests/site.pp
        
    file { 'helloworld':

        path => '/etc/helloworld.txt',
        owner  => 'root',
        group  => 'root',
        mode   => '655',
        content => "hello world from puppet!\n",
        }

    • 客户端
        ✘✘∙𝒗2 ~ ➜ puppet agent --test

        然后就多了个文件出来了
        ✘✘∙𝒗2 ~ ➜ cat /etc/helloworld.txt
        hello world from puppet!







🔸 执行脚本.
    作为进阶的任务，我们希望节点可以执行一些更加复杂一点的任务。
    我们希望节点可以从 PuppetServer 获取一个命令脚本，并且执行该脚本。

    • 创建一个名叫”test”的模块文件夹
        mkdir /etc/puppetlabs/code/environments/production/modules/test

    • 在 test 模块下面创建一个”files”文件夹。在这个文件夹里的文件是可以被节点获取的。
        mkdir /etc/puppetlabs/code/environments/production/modules/test/files

    • 在”files”文件夹里创建一个 shell 脚本 test.sh
        该脚本会在/etc/目录下创建 helloworld.log 文件，然后在文件里添加”hello world”内容。

        vi /etc/puppetlabs/code/environments/production/modules/test/files/test.sh
        脚本内容
    touch /etc/helloworld.log
    echo "helloworld" >> /etc/helloworld.log

    • 编辑 site.pp
        我们定义了两个资源：一个文件资源和一个执行命令资源。
        这两个资源有依赖关系，命令执行资源依赖于文件资源，所以 Puppet 会优先处理文件资源。
        执行命令资源会在文件资源存在后再执行。

        vi /etc/puppetlabs/code/environments/production/manifests/site.pp


    file { 'test.sh':
    path => '/etc/test.sh',
    owner  => 'root',
    group  => 'root',
    mode   => '655',
    source => 'puppet:///modules/test/test.sh',
    }
    exec { 'execute ':
    command => 'bash /etc/test.sh',
    require => File['test.sh'],
    path => ["/bin/"],
    }


    • 客户端
        puppet agent --test

            Info: Using configured environment 'production'
            Info: Retrieving pluginfacts
            Info: Retrieving plugin
            Info: Caching catalog for vps2.localdomain
            Info: Applying configuration version '1500166128'
            Notice: /Stage[main]/Main/File[test.sh]/ensure: defined content as '{md5}4a7fef6d906b79559966eef350f380a6'
            Notice: /Stage[main]/Main/Exec[execute ]/returns: executed successfully
            Notice: Applied catalog in 0.41 seconds

    • 客户端检测
        cat /etc/helloworld.log
        出现 helloworld












🔸 常用配置命令

node default {
    cron {
        "check raid":
        command => "/usr/local/scripts/check_raid.sh",
        user    => root,
        hour    => '*',
        minute  => '*/5',
        ensure  => present;

        "add puppet cron":
        command => "/usr/bin/puppet agent --server puppet.server.com",
        user    => root,
        minute  => [0,30];
    }

    exec {
        "generate timestamp file":
        command => "date +%s > timestamp.file",
        path    => "/usr/bin:/usr/sbin:/bin",
        onlyif  => "test -f timestamp.file",
        cwd     => "/tmp";
    }

    file {
        "pp_test.txt":
        path    => "/tmp/pp_test.txt",
        ensure  => present,
        content => "Just do a puppet test!",
        mode    => 0644;
    }

    host {
        "add repo":
        ensure  => present,
        name    => "yum.puppet.com",
        ip      => "192.168.1.15",
        host_aliases => ["repo.puppet.com", "r.puppet.com"];
    }

    mount {
        "mount to /mnt":
        atboot  => true,
        ensure  => present,
        device  =>  "/dev/vdb",
        name    => "/mnt",
        fstype  => "ext4",
        options => "defaults";
    }

    package {
        "httpd":
        name    => "httpd.x86_64",
        ensure  => installed;
    }

    ssh_authorized_key {
        "zhiwei's key":
        ensure  => present,
        name    => "zhiwei's ssh rsa key",
        key     => "a long hex sting in ~/.ssh/id_rsa.pub",
        type    => rsa,
        user    => root;
    }

    tidy {
        "remove tmp file":
        age     => "1w",
        recurse => true,
        matches => ["[0-9a-z]*.tmp", "*.swap"];
    }

    user {
        "add zhiwei":
        ensure  => present,
        home    => "/home/zhiwei",
        name    => zhiwei,
        password=> 123456,
        shell   => /bin/bash,
        managehome=>true;
    }

    yumrepo {
        "private repo":
        name    => "plus",
        descr   => "Plus private repo",
        baseurl => "http://private.puppet.com",
        enabled => 1,
        timeout => 5;
    }
}