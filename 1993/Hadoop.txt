🔵 Hadoop 环境搭建 (Docker)

    学习hadoop. 需要一个最基本的 hadoop 环境: 一台 master 两台 slave
        三台电脑可以用实体机. 也可以用虚拟机(vmware / vbox / Docker)
        我们只有一台笔记本.所以选择docker.  vm/vb 跑三个虚拟机实在太卡了. 
        Mac 原生是不支持docker的. 虽然Docker 官方也提供Mac 的安装包,但是不好用.
        强烈建议在 Ubuntu/Debian/CentOS 这样的平台运行 Docker
        Linux 内核版本必须是 2.6以上的. 也就是 CentOS7 之后的.

      我们在Mac上搭建. CentOS7 的虚拟机.
      在Centos7 上搭建Docker环境.
      在Docker 中 搭建两个centos slave 虚拟机
      现在我们就有三个centos了; 一个 vm出来的centos; 两个 docker 出来的 centos..


    hadoop 集群规划.
        三台电脑能相互通信就可以了.
        192.168.10.11  hadoop1  namenode
        192.168.10.12  hadoop2  datanode
        192.168.10.13  hadoop3  datanode

    修改每台电脑的主机名: hadoop1 /hadoop2 /hadoop3

    建立 ip 和 域名的关系. hosts 文件添加下面的就可以.
      192.168.10.11 hadoop1
      192.168.10.12 hadoop2
      192.168.10.13 hadoop3

    关闭防火墙
    SSH 无秘钥认证
    NTP时间同步

        集群中所有主机必须保持时间同步，如果时间相差较大会引起各种问题。
        具体思路如下：master节点作为ntp服务器，对所有datanode节点提供时间同步服务。
        所有datanode节点以master节点为基础同步时间
        所有节点安装相关组件：yum install ntp。
        完成后，配置开机启动：chkconfig ntpd on,
        检查是否设置成功：chkconfig --list ntpd其中2-5为on状态就代表成功




🔵 CentOS7 X64 虚拟机(Vmware)
    .... 搭建自己解决.虚拟机都搭不起来 就别折腾了...
    我选择的是最小安装. 也就是不带界面的..

    🔸网络
    搭建好后看 虚拟机能不能上网.一般来说网络是没有启动的.需要设置
    Centos 用 ip命令 代替了 ifconfig.
        ip link show                                        # 显示网络接口信息
        ip link set eth0 up                                # 开启网卡
        ip link set eth0 down                               # 关闭网卡
        ip addr show                                        # 显示网卡IP信息
        ip addr add 192.168.0.1/24 dev eth0                 # 设置eth0网卡IP地址192.168.0.1
        ip addr del 192.168.0.1/24 dev eth0                 # 删除eth0网卡IP地址
        ip route list                                       # 查看路由信息
        ip route add default via  192.168.0.254  dev eth0   # 设置默认网关为192.168.0.254

查看网卡状态: ➜  ip addr ➜  有status UP、ststus DOWN的.
UP 就说明网卡开启了.
Down 就说明网卡没开启.

找到有 ip和广播地址的那个网卡. 我这里是 virbr0
发现这个网卡 只有网段.没有IP地址!!!
必须有IP地址.才能正常开启网卡的...
所以要先设置 IP地址..

ip link set virbr0 up
    
    
    
    
     开启ssh远程(默认自带ssh服务的)!!! 
service sshd status  ➜  正常应该是运行的.
service listening on 0.0.0.0 port 22 ➜  说明只允许CentOS 内部连接ssh.
外部的笔记本是连不进去的.所以要改设置.




    ifconfig ➜  看ip ➜  192.168.122.1






🔵 Docker 基本使用




Docker :

轻量级虚拟机! 是一个进程 不是一台机器.
两个程序  服务端 和 客户端.  服务端管理所有容器.


Docker 会为所有已经运行（包括已经停止）的容器随机分配一个唯一的名字和一个唯一的 ID，
docker 命令可以识别 ID，也可以识别这个名字。
docker ps -a 来显示 

每次运行 docker run 命令的时候，Docker 都会新建一个唯一的容器ID ， → 不同的容器 数据是不通的... 
已经停止的容器 里面的数据不会消失  用 docker ps -a 显示.

现在我们使用 -i（交互式）和 -t（临时终端）参数运行一个容器，然后输入一些交互命令：

容

版本信息:
docker version


显示所有参数             docker
版本信息                    docker version
镜像列表:                   docker images
重命名镜像名             docker tag 468e6235b128 kali:latest tag + ID + Name:latest   → 默认官方名字 改成 kali 
开关启 Docker          docker run / stop kali -i -t ( Contain name ) 
运行中的镜像             docker ps 需要新开 docker 终端 执行. 

保存&启动 容器  其实是新加标签 类似 git . 要养成给容器打标签的习惯.
新终端 docker ps 查看 容器 ID (经常会变 不固定的.)  记下前3位数字.
新终端 docker commit 188 xujian    就把容器保存为xujian 了
启动保存的容器:  docker -it xujian
	
	docker run ubuntu /bin/echo 'hello world'
	//  要有 系统名称 比如 ubuntu . 本地没有镜像  docker 会自动下一个. 
	
	docker inspect 698 
容器的详细信息.


备份镜像    docker push xujian
删除容器   docker rm 43de70a54ec1,或者简写成 docker rm 43de    来释放空间.

删除镜像: docker rmi xujian
// 如果有容器(即便已经停止) 存在.  那么就不能删除镜像. 不然暂停的容器就起不来.



新建 Docker
切换到 docker
管理容器

docker run -it ubuntu bash
// 就能进到 ubuntu 的 bash 了 能输入各种命令.

docker run ubuntu
docker → 你要使用 docker
run  → 开启 运行
ubuntu → 镜像名称 


找到镜像:
去 docker 官网看. 
[https://hub.docker.com/explore/]

下载 mysql
docker pull mysql

下载 debian
docker pull debian
 
在 docker 中运行 hello world
docker run debian echo ''hello world''

在容器中安装程序:

保存容器:
查看容器的 ID :  docker ps 只需前几位id就好
	docker commit 698 ubuntu


每次运行 都是一个新的容器.

删除容器:
先停止 再删除
docker stop ubuntu
docker rm ubuntu














🔵 安装/配置 Docker 
    🔸 查看Linux内核版本:    uname -r  ➜  必须大于 2.6

    🔸 查看Device Mapper是否安装: 
          ls -l /sys/class/misc/device-mapper
              lrwxrwxrwx 1 root root 0 May  1 20:55 /sys/class/misc/device-mapper -> ../../devices/virtual/misc/device-mapper
          如果没有检测到Device Mapper，需要安装device-mapper软件包:
          sudo yum install -y device-mapper
          
          然后重新加载dm_mod内核模块:
          sudo modprobe dm_mod

    🔸 安装docker:       sudo yum install docker
    🔸 启动Docker:       systemctl start docker
    🔸 升级系统 (必须):  sudo yum update
    🔸 验证安装:         docker info
    🔸 开机启动 (可选):  systemctl enable docker


    🔸 拉取 CentOS7 的Docker镜像
        docker pull daocloud.io/library/centos:centos7
            daocloud.io/library/centos表示镜像的名字
            centos7表示镜像的版本，默认是latest，表示最新版


    🔸 启动镜像
        docker images  ➜  查看本地镜像列表. 然后选择一个来启动.

        docker run -h master --dns=61.139.2.69 -it daocloud.io/library/centos:centos7
            -h	master	        指定hostname
            --dns	61.139.2.69	  指定DNS，默认的是8.8.8.8,国内环境...
            -it		              以交互模式启动

    🔸 安装需要的软件:
        sudo yum install -y wget vim openssh-server openssh-clients net-tools
            拉取到本地的镜像是尽可能小的，所以很多命令都没有安装:
                openssh-server :  安装sshd服务
                openssh-clients : 安装ssh命令
                net-tools :       安装netstat, ifconfig等命令

    🔸 启动SSH
        容器是被docker管理的，无法使用一些系统命令，要启动sshd需要执行如下命令
        /usr/sbin/sshd -D &
        也就是后台启动ssh的意思.  之后就可以用ssh登录容器了.

        ssh 是hadoop 必须的服务. 所以我们要设置启动容器就开启ssh.
        由于容器中开启ssh 不能用常规的开机启动方法.所以我们要通过脚本来实现.
        这里不让其后台运行是为了保证容器不退出，只要容器在后台运行，我们就可以在宿主机上连接容器。

            vim /root/run.sh
            chmod 750 /root/run.sh
            cat /root/run.sh
            !/bin/bash
            /usr/sbin/sshd -D


🔵 网络配置

    安装好docker 发现不能上网. 发现是dns的问题.
    不怕折腾的我怎么能够忍受每启动一个容器都要带上--dns参数呢，一定可以改的。
    修改默认dns

    修改/etc/default/docker
        DOCKER_NETWORK_OPTIONS="--dns=61.139.2.69"

    修改/lib/systemd/system/docker.service
        ...
        [Service]
        EnviornmentFile=-/etc/default/docker
        ExecStart=/usr/bin/docker daemon -H fd:// $OPTIONS \
                  $DOCKER_NETWORK_OPTIONS
        ...

    重启docker
    systemctl daemon-reload
    systemctl restart docker.service
    #使用这个命令可以查看 docker 的启动命令是否生效
    $ ps -ef | grep docker
    root     ***     1  0 5月25 ?       00:02:23 /usr/bin/docker daemon -H fd:// --dns=61.139.2.69 --registry-mirror=***


🔵 安装 JDK8
    wget --no-check-certificate --no-cookies --header "Cookie: oraclelicense=accept-securebackup-cookie" http://download.oracle.com/otn-pub/java/jdk/8u91-b14/jdk-8u91-linux-x64.tar.gz
    sudo mkdir /usr/java
    sudo tar zxf jdk-8u91-linux-x64.tar.gz -C /usr/java
    sudo echo "export JAVA_HOME=/usr/java/jdk1.8.0_91" >> /etc/bashrc
    sudo "export PATH=$PATH:$JAVA_HOME/bin" >> /etc/bashrc
    sudo echo "export CLASSPATH=$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar" >> /etc/bashrc
    source /etc/bashrc





🔵 安装hadoop: 
  wget http://mirrors.cnnic.cn/apache/hadoop/common/hadoop-2.7.2/hadoop-2.7.2.tar.gz
  sudo mkdir /usr/local/hadoop
  sudo tar zxf hadoop-2.7.2.tar.gz -C /usr/local/hadoop
  sudo echo "export HADOOP_HOME=/usr/local/hadoop/hadoop-2.7.2" >> /etc/bashrc
  sudo echo "export HADOOP_CONFIG_HOME=$HADOOP_HOME/etc/hadoop" >> /etc/bashrc
  sudo echo "export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin" >> /etc/bashrc
  source /etc/bashrc



🔵 配置 hadoop

    配置:  https://github.com/kbyyd24/blog/issues/2





🔵 免密码登录

    ssh-keygen -t rsa -P "" -f ~/.ssh/id_rsa
    cd ~/.ssh
    #获取宿主机的公钥，方便宿主机登录
    scp melo@172.17.0.1:~/.ssh/id_rsa.pub authorized_keys
    cat id_rsa.pub >> authorized_keys
    chmod 600 authorized_keys


    还有一个细节，因为后面运行时，如果每次都从镜像启动，那都是全新的环境，使用ssh登录时是需要确认的。
    为了避免不必要的麻烦，特意查了资料，找到解决办法。
    想要达到连接新主机时不用确认的效果，就需要修改客户端的ssh配置的StrictHostKeyChecking。该参数默认为ask，修改为no
    Host *
      StrictHostKeyChecking no
    
    http://www.worldhello.net/2010/04/08/1026.html



🔵 Docker 配置

🔸保存Container
docker commit -m "hadoop installed" <container id|container name> centos:hadoop


🔸启动Hadoop

  slave需要知道master在哪里，才能向master发送心跳和数据块，否则master上的namenode将找不到datanode
  因为对docker的网络配置不熟悉，所以我采用了一个简单的办法，修改/root/run.sh
  #!/bin/bash
  echo "172.17.0.4    master" >> /etc/network
  /usr/sbin/sshd -D
  因为节点只有3个，我也只开这三个容器，master又是最后启动的，所有master的地址就是172.17.0.4

  所以上面创建的镜像已经可以使用了。





🔸启动容器

    $ docker run -d --name slave1 centos:hadoop /root/run.sh
    $ docker run -d --name slave2 centos:hadoop /root/run.sh
    $ docker run -d --name master -h master -P --link slave1:slave1 --link slave2:slave2 centos:hadoop /root/run.sh

    我将以上三个命令写到了一个启动脚本里，直接就可以启动了，然后在用ssh登录到master上启动hadoop
    因为使用的是docker的默认网络，所有可以算出master的IP地址，当然，也可以通过docker netword inspect bridge命令去获取


🔸 启动 Hadoop

  切换到$HADOOP_HOME目录，首先格式化namenode:

  ./bin/hadoop namenode -format

  然后就可以启动Hadoop了

  就可以使用浏览器 查看web 管理接口!!

  详细文章: https://github.com/kbyyd24/blog/issues/2


