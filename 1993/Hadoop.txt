❤️ Hadoop 环境搭建

      学习hadoop. 需要一个最基本的 hadoop 环境: 一台 master 两台 slave
          三台电脑可以用实体机. 也可以用虚拟机(vmware / vbox / Docker)
          我们只有一台笔记本.所以选择docker.  vm/vb 跑三个虚拟机实在太卡了. 
          Mac 原生是不支持docker的. 虽然Docker 官方也提供Mac 的安装包,但是不好用.
          强烈建议在 Ubuntu/Debian/CentOS/Kali 这样的Linux平台运行 Docker
          Linux 内核版本必须是 2.6以上的. 推荐CentOS 7+

        我们在Mac上搭建. CentOS7 的虚拟机.
        在Centos7 上搭建Docker环境.
        在Docker 中 搭建两个centos slave 虚拟机
        现在我们就有三个centos了; 一个 vm出来的centos; 两个 docker 出来的 centos..



❤️ CentOS7 网络配置 
      虚拟机安装的时候选择带界面的GUI模式!!! 不要选最小化.CLI模式怕你网络都配置不好.

      🔸 去界面设置固定IP
           service network restart ➜  重启网络服务来生效 

      🔸 查看ssh远程设置(默认自带ssh服务,并且开启的)!!! 
            service sshd status  ➜  正常应该是运行的.
            service listening on 0.0.0.0 port 22 ➜  说明 CentOS 是允许所有电脑进行远程的.

      🔸 免密码SSH登录设置
            客户端: 🔅 cd /Users/v/.ssh/
                // Mac的公钥是在这个位置的.
            服务器: 🔅 mkdir ~/.ssh
                // 文件是传到 服务器对应用户的.ssh目录下的. 如果没有这个文件夹.你得自己建立.
            客户端: 🔅 scp -r id_rsa.pub root@192.168.169.111:~/.ssh/   
                // scp 这里有可能连不是虚拟机. 
                // ssh 认证是双向的. 
                // 你连过哪些服务器的IP. 本地把服务器的公钥也保存下来的!!
                // 一旦你服务器重装系统. 也就意味着服务器的公钥变了.
                // 一旦你在本地用同样的ip连重装系统的服务器.就会导致服务器的公钥和本地之前存的服务器公钥不一致.
                // 这些记录在 /Users/v/.ssh/ 的 known_hosts文件中.
                // 如果某服务器登录不了. 可以试着在这文件里面删除对应的服务器公钥.
            服务器: 🔅 cat ~/.ssh/id_rsa.pub >> ~/.ssh/authorized_keys

      🔸 虚拟机设置快照来备份
          选择虚拟机 ➜  右键 ➜  snapshot ➜  take ..



⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️
❤️ 安装/配置 Docker  (Kali)

      要安装Docker Kali系统必须是 64位的.
      一键安装脚本: https://gist.github.com/apolloclark/f0e3974601346883c731
          说说最后几步.
          sudo service docker restart
              重启之后.ssh就挂了...
              22端口 拒绝连接... 估计是docker 干的事情.
              nmap 127.0.0.1  居然一个端口都没开...
              /etc/init.d/ssh status  服务没启动.
              /etc/init.d/ssh start   启动服务就可以了.
              问题是开机启动估计也挂了...
              /etc/rc.local 文件里加入/etc/init.d/ssh start 这行就可以了.
              注意好像要加到 最后一行的 exit 0 行前面.


❤️ 安装/配置 Docker  (CentOS 7)

      🔸 检查Linux内核版本:    uname -r  ➜  必须大于 2.6
      🔸 检查Device Mapper是否安装: 
            ls -l /sys/class/misc/device-mapper
            有信息输出就可以.如果没有检测到.需要安装device-mapper软件包:
            sudo yum install -y device-mapper
            
            然后重新加载dm_mod内核模块:
            sudo modprobe dm_mod

      🔸 安装docker:       sudo yum install docker
          /var/run/yum.pid 已被锁定错误:网上统一的解决办法：
          直接在终端运行 rm -f /var/run/yum.pid 将该文件删除，然后再次运行yum。

      🔸 启动Docker:       systemctl start docker
      🔸 升级系统 (必须):  sudo yum update
      🔸 验证安装:         docker info
      🔸 开机启动 (可选):  systemctl enable docker
⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️⬛️





🔵 Docker 简介

    Docker :  轻量级虚拟机! 是一个进程 不是一台机器.
    两个程序:  服务端 和 客户端.  服务端管理所有容器.
    Docker 会为所有已经运行（包括已经停止）的容器随机分配一个唯一的名字和一个唯一的 ID，
    docker 相关的命令都可以识别 ID，也可以识别这个名字。
    每次运行 docker run 命令的时候，Docker 都会新建一个唯一的容器ID ， → 不同的容器 数据是不通的... 
    📌 已经停止容器里面的数据不会消失!!!  用 docker ps -a 显示.
    每次运行 都是一个新的容器.
    删除容器(先停再删): ➜  docker stop ubuntu  ➜ docker rm ubuntu


docker                                      ➜  显示所有命令             
docker version                              ➜  版本信息 


镜像官网:    https://hub.docker.com/explore/
可以搜索各种镜像 如centos    https://hub.docker.com/_/centos/
当然国内下载很慢!!! 最简单的上VPN!!!!


docker pull centos                          下载最新稳定版(centos7 )
docker pull centos:centos6                  如果要下载其他版本就要指定 版本号.




docker pull mysql                           ➜ 下载镜像 mysql   
docker pull debian                          ➜ 下载镜像 debian 
docker pull [选项] [Docker Registry地址]<仓库名>:<标签>
上面的命令中没有给出 Docker Registry 地址，因此将会从 Docker Hub 获取镜像。而镜像名称是 ubuntu:14.04，因此将会获取官方镜像 library/ubuntu 仓库中标签为 14.04 的镜像。



docker images                               ➜  显示镜像列表             
        root@kali:~# docker images
        REPOSITORY                   TAG                 IMAGE ID            CREATED             SIZE
        xujian                       latest              f8905cc29b7e        44 minutes ago      335MB
        daocloud.io/library/centos   centos7             a8493f5f50ff        4 days ago          192MB
        hello-world                  latest              48b5124b2768        2 months ago        1.84kB

📌 语法: docker ✚ run/stop ✚ 系统名称 ✚ -i(交互式) ✚ -t(临时终端) ✚ 容器名 
docker run ubuntu                            ➜  docker(使用 docker命令); run(开启运行); ubuntu(镜像名称) 
docker run -it xujian bash                   ➜  用docker 启动xujian这个镜像. 并进入交互模式

docker run debian echo ''hello world''       ➜  用 debian这个系统.执行: echo ''hello world''   这个命令
docker run ubuntu /bin/echo 'hello world'    ➜  用 ubuntu这个系统.执行: /bin/echo 'hello world'这个命令. (本地如果没有ubuntu这个镜像, docker会自动下一个)
docker run -it ubuntu bash                   ➜  用 ubuntu这个系统.执行 bash 这个命令. 进入 ubuntu 的bash的意思.

docker ps -a                                 ➜  显示所有的容器.   
docker ps                                    ➜  显示运行中容器.  查看容器 ID (经常会变 不固定的.)  记下前3位数字. 
        root@kali:~# docker ps
        CONTAINER ID    IMAGE                                COMMAND        CREATED             STATUS             PORTS  NAMES
        96e03f352e26    daocloud.io/library/centos:centos7   "/bin/bash"    About an hour ago   Up About an hour          clever_poitras

docker commit 188 xujian                     ➜  容器保存为xujian  原理类似 git. 要养成给容器打标签的习惯.
docker -it xujian                            ➜  启动保存的容器.


docker inspect 698    容器的详细信息.

docker stop 96e03f352e26
docker stop 96e

docker tag 468e6235b128 kali:latest tag + ID + Name:latest   →重命名镜像名              默认官方名字 改成 kali 
  
docker push xujian         备份镜像   
docker rm 43de70a54ec1,    删除容器   来释放空间.
docker rm 43de             删除容器   简写方式

docker rmi xujian    删除镜像:// 如果有容器(即便已经停止) 存在.  就不能删除镜像. 不然暂停的容器就起不来.








❤️ Docker 操作

    🔸 拉取 CentOS7 的Docker镜像
            docker pull daocloud.io/library/centos:centos7
                daocloud.io/library/centos表示镜像的名字
                centos7表示镜像的版本，默认是latest，表示最新版
                镜像只有70MB.很快的.


    🔸 启动镜像
        docker images  ➜  查看本地镜像列表. 然后选择一个来启动.

        docker run -h master --dns=61.139.2.69 -it daocloud.io/library/centos:centos7
        // 这样就进入 centOS了!!!
        // 这里有问题. ping ip可以 ping 网站就不行.. 换个dns试试...

            -h	master	        指定hostname
            --dns	61.139.2.69	  指定DNS，默认的是8.8.8.8,国内环境...
            -it		              以交互模式启动

    🔸 安装 CentOS 需要的软件:
          yum install -y wget vim openssh-server openssh-clients net-tools
              拉取到本地的镜像是尽可能小的，所以很多命令都没有安装:
                  📌openssh-server ➜ 安装sshd服务
                  ssh -V ➜ 查看SSH版本



                  openssh-clients : 安装ssh命令
                  net-tools :       安装netstat, ifconfig等命令

    🔸 启动SSH
        容器是被docker管理的，无法使用一些系统命令，要启动sshd需要执行如下命令
        /usr/sbin/sshd -D &
        也就是后台启动ssh的意思.  之后就可以用ssh登录容器了.
        Could not load host key: /etc/ssh/ssh_host_ecdsa_key
        这里会报错...
        导致该问题的根源是，sshd守护进程不知怎么地不能加载SSH主机密钥了。
        当OpenSSH服务器第一次安装到Linux系统时，SSH主机密钥应该会自动生成以供后续使用。
        如果，不管怎样，密钥生成过程没有成功完成，那就会导致这样的SSH登录问题。

    让我们检查能否在相应的地方找到SSH主机密钥。
    ls -al /etc/ssh/ssh*key 
    如果SSH主机密钥在那里找不到，或者它们的大小被截断成为0（就像上面那样），你需要从头开始重新生成主机密钥。
    在Debian、Ubuntu或其衍生版上，你可以使用dpkg-reconfigure工具来重新生成SSH主机密钥，过程如下：

    当第一次使用SSH登录远程主机时，会出现没有找到主机密钥的提示信息。输入"yes"后，系统会将远程主机的密钥加入到你的主目录下的 .ssh/known_hosts 文件里（我用的是Mac OS X），这样你就可以继续操作了。因为远程主机的密钥已经加入到ssh客户端的已知主机列表中，当你第二次登陆远程主机时，只需要你输入远程主机的登录密码即可。如果远程主机的密钥发生改变，将会看到一些警告信息。在输入“yes”之前呢，最佳的选择或许是联系系统管理员来分析为什么会出现主机验证码改变的信息，核对主机验证码是否正确。






    主机密钥生成:
    ssh-keygen -t rsa
    一路回车.  记住下面两个路径..
    Your identification has been saved in /root/.ssh/id_rsa.
    Your public key has been saved in /root/.ssh/id_rsa.pub.

    id_rsa 是私钥，id_rsa.pub 是公钥








        systemctl start sshd.service
        启动ssh服务:




        ssh 是hadoop 必须的服务. 所以我们要设置启动容器就开启ssh.
        由于容器中开启ssh 不能用常规的开机启动方法.所以我们要通过脚本来实现.
        这里不让其后台运行是为了保证容器不退出，只要容器在后台运行，我们就可以在宿主机上连接容器。

            vim /root/run.sh
            chmod 750 /root/run.sh
            cat /root/run.sh
            !/bin/bash
            /usr/sbin/sshd -D














🔵 网络配置

    安装好docker 发现不能上网. 发现是dns的问题.
    不怕折腾的我怎么能够忍受每启动一个容器都要带上--dns参数呢，一定可以改的。
    修改默认dns

    修改/etc/default/docker
        DOCKER_NETWORK_OPTIONS="--dns=61.139.2.69"

    修改/lib/systemd/system/docker.service
        ...
        [Service]
        EnviornmentFile=-/etc/default/docker
        ExecStart=/usr/bin/docker daemon -H fd:// $OPTIONS \
                  $DOCKER_NETWORK_OPTIONS
        ...

    重启docker
    systemctl daemon-reload
    systemctl restart docker.service
    #使用这个命令可以查看 docker 的启动命令是否生效
    $ ps -ef | grep docker
    root     ***     1  0 5月25 ?       00:02:23 /usr/bin/docker daemon -H fd:// --dns=61.139.2.69 --registry-mirror=***


🔵 安装 JDK8
    wget --no-check-certificate --no-cookies --header "Cookie: oraclelicense=accept-securebackup-cookie" http://download.oracle.com/otn-pub/java/jdk/8u91-b14/jdk-8u91-linux-x64.tar.gz
    sudo mkdir /usr/java
    sudo tar zxf jdk-8u91-linux-x64.tar.gz -C /usr/java
    sudo echo "export JAVA_HOME=/usr/java/jdk1.8.0_91" >> /etc/bashrc
    sudo "export PATH=$PATH:$JAVA_HOME/bin" >> /etc/bashrc
    sudo echo "export CLASSPATH=$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar" >> /etc/bashrc
    source /etc/bashrc





🔵 安装hadoop: 
  wget http://mirrors.cnnic.cn/apache/hadoop/common/hadoop-2.7.2/hadoop-2.7.2.tar.gz
  sudo mkdir /usr/local/hadoop
  sudo tar zxf hadoop-2.7.2.tar.gz -C /usr/local/hadoop
  sudo echo "export HADOOP_HOME=/usr/local/hadoop/hadoop-2.7.2" >> /etc/bashrc
  sudo echo "export HADOOP_CONFIG_HOME=$HADOOP_HOME/etc/hadoop" >> /etc/bashrc
  sudo echo "export PATH=$PATH:$HADOOP_HOME/bin:$HADOOP_HOME/sbin" >> /etc/bashrc
  source /etc/bashrc



🔵 配置 hadoop

    配置:  https://github.com/kbyyd24/blog/issues/2





🔵 免密码登录

    ssh-keygen -t rsa -P "" -f ~/.ssh/id_rsa
    cd ~/.ssh
    #获取宿主机的公钥，方便宿主机登录
    scp melo@172.17.0.1:~/.ssh/id_rsa.pub authorized_keys
    cat id_rsa.pub >> authorized_keys
    chmod 600 authorized_keys


    还有一个细节，因为后面运行时，如果每次都从镜像启动，那都是全新的环境，使用ssh登录时是需要确认的。
    为了避免不必要的麻烦，特意查了资料，找到解决办法。
    想要达到连接新主机时不用确认的效果，就需要修改客户端的ssh配置的StrictHostKeyChecking。该参数默认为ask，修改为no
    Host *
      StrictHostKeyChecking no
    
    http://www.worldhello.net/2010/04/08/1026.html



🔵 Docker 配置

🔸保存Container
docker commit -m "hadoop installed" <container id|container name> centos:hadoop


🔸启动Hadoop

  slave需要知道master在哪里，才能向master发送心跳和数据块，否则master上的namenode将找不到datanode
  因为对docker的网络配置不熟悉，所以我采用了一个简单的办法，修改/root/run.sh
  #!/bin/bash
  echo "172.17.0.4    master" >> /etc/network
  /usr/sbin/sshd -D
  因为节点只有3个，我也只开这三个容器，master又是最后启动的，所有master的地址就是172.17.0.4

  所以上面创建的镜像已经可以使用了。





🔸启动容器

    $ docker run -d --name slave1 centos:hadoop /root/run.sh
    $ docker run -d --name slave2 centos:hadoop /root/run.sh
    $ docker run -d --name master -h master -P --link slave1:slave1 --link slave2:slave2 centos:hadoop /root/run.sh

    我将以上三个命令写到了一个启动脚本里，直接就可以启动了，然后在用ssh登录到master上启动hadoop
    因为使用的是docker的默认网络，所有可以算出master的IP地址，当然，也可以通过docker netword inspect bridge命令去获取


🔸 启动 Hadoop

  切换到$HADOOP_HOME目录，首先格式化namenode:

  ./bin/hadoop namenode -format

  然后就可以启动Hadoop了

  就可以使用浏览器 查看web 管理接口!!

  详细文章: https://github.com/kbyyd24/blog/issues/2











    NTP时间同步

        集群中所有主机必须保持时间同步，如果时间相差较大会引起各种问题。
        具体思路如下：master节点作为ntp服务器，对所有datanode节点提供时间同步服务。
        所有datanode节点以master节点为基础同步时间
        所有节点安装相关组件：yum install ntp。
        完成后，配置开机启动：chkconfig ntpd on,
        检查是否设置成功：chkconfig --list ntpd其中2-5为on状态就代表成功

